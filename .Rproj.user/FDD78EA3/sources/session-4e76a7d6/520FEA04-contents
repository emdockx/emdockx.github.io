##================================================================
##================================================================
## SECTION 0: Preparation
##================================================================
##================================================================

# Load packages
library(dplyr)
library(jsonlite)
library(httr)
library(ggplot2)
library(stringr)
library(tidyr)
library(purrr)
library(lubridate)
library(leaflet)
library(DT)
library(plotly)

# Prepare global environment
rm(list = ls(all = TRUE))

# Load existing data
load("/Users/emmanueldockx/Dropbox/GitHub/emdockx.github.io/stravawattz/stravawattz.RData")

##================================================================
##================================================================
## SECTION 1: API and cleaning
##================================================================
##================================================================

# DEBUGGING
#df_running <- df_running[0, ]
#df_cycling <- df_cycling[0, ]
#df_swimming <- df_swimming[0, ]

# # Define Strava API credentials
# STRAVA_KEY <- "113481"
# STRAVA_SECRET <- "43aa643183a97451898f5d7f5bf63474af6815e5"
# 
# # Create an OAuth app
# app <- oauth_app("strava", STRAVA_KEY, STRAVA_SECRET)
# 
# # Define the OAuth endpoints
# endpoint <- oauth_endpoint(
#   request = NULL,
#   authorize = "https://www.strava.com/oauth/authorize",
#   access = "https://www.strava.com/oauth/token"
# )
# 
# # Get an OAuth token
# token <- oauth2.0_token(endpoint, app, as_header = FALSE, scope = "activity:read_all", cache = TRUE)
# 
# # Capture access token
# access_token <- token$credentials$access_token
# 
# # Initialize empty dataframe
# df <- data.frame()
# 
# # Initialize page variable
# page <- 1
# 
# # Start data retrieval
# while (TRUE) {
#   req <- httr::GET(
#     url = "https://www.strava.com/api/v3/athlete/activities",
#     config = token,
#     query = list(per_page = 200, page = page)
#   )
#   
#   # Convert JSON to dataframe
#   activity_data <- fromJSON(content(req, as = "text"), flatten = TRUE)
#   
#   # Stop if no data found
#   if (length(activity_data) == 0) {break}
#   
#   # Append data to dataframe
#   if (nrow(df) == 0) {df <- activity_data} else {
#     common_cols <- intersect(names(df), names(activity_data))
#     df <- rbind(df[, common_cols, drop = FALSE], activity_data[, common_cols, drop = FALSE])}
#   
#   # Turn to next page
#   page <- page + 1
# }
# 
# # Clean global environment
# rm(app, endpoint, req, token, i, activity_data, common_cols, page, STRAVA_KEY, STRAVA_SECRET)
# 
# # Determine useful existing data id's
# saved_id <- unique(c(df_running$id, df_cycling$id, df_swimming$id))
# 
# # Remove existing data
# df <- df |> filter(!(id %in% saved_id))
# 
# # Proceed only if new data was found
# if (nrow(df) >= 1) {
#   
#   # Initialize empty geo column
#   df$geo <- NA
#   
#   # Check each session for geo data
#   for (i in unique(df$id)){
#     temp <- df |> filter(id == i)
#     df$geo[match(i, df$id)] <- ifelse(any(sapply(temp$start_latlng, function(x) length(x) > 0)) == TRUE, 1, 0)}
#   
#   # Filter and convert the raw data
#   df_clean <- df |>
#     select(id, date = start_date, type = sport_type, distance, time = moving_time, elevation = total_elevation_gain, speed_max = max_speed, hr = average_heartrate, hrmax = max_heartrate, geo) |>
#     mutate(date = as.Date(date), distance = round(distance, 0), time = round(time, 99), speed_max = speed_max * 3.6, hr = round(hr, 0), hrmax = round(hrmax, 0)) |>
#     arrange(date, id, type, distance, time, elevation, hr)
#   
#   # Cancel if no new data was found
# } else {"No new Strava data found."}
# 
# # Clean global environment
# rm(df, temp, i)
# 
# ##================================================================
# ##================================================================
# ## SECTION 2: Running, cycling and swimming dataframes
# ##================================================================
# ##================================================================
# 
# ##-------#######-------##
# ##-------RUNNING-------##
# ##-------#######-------##
# 
# # Subset data
# df_clean_running <- df_clean |> filter(type == "Run")
# 
# # Cleaning for RUNNING dataframe
# df_clean_running <- df_clean_running |>
#   filter(geo == 1) |> # only when microdata is available
#   filter(distance >= 1000) |> # only sessions with at least 1000m running
#   filter(time >= 600) |> # only sessions with at least 10min running
#   filter(!is.na(hr)) |> # only sessions with non-missing HR data
#   arrange(id) # sort by id number
# 
# # Add data for speed (km/h)
# df_clean_running$speed <- round((df_clean_running$distance/1000) / (df_clean_running$time/60/60), 2)
# 
# # Add data for pace (min/km)
# df_clean_running$pace <- round((df_clean_running$time/60) / (df_clean_running$distance/1000), 2)
# 
# # Add data for pace_max (min/km)
# df_clean_running$pace_max <- 60 / df_clean_running$speed_max
# 
# # Proceed only if new running data with microdata was found
# if (nrow(df_clean_running) >=1) {
#   
#   # Initialize a microdataframe
#   df_clean_running_temp <- data.frame()
#   
#   # Retrieve microdata
#   for (i in unique(df_clean_running$id)){
#     
#     url <- parse_url(str_glue("https://www.strava.com/api/v3/activities/{i}/streams"))
#     
#     request <- modify_url(url, query = list(access_token = access_token, keys = str_glue("distance,time,latlng,altitude,velocity_smooth,cadence,watts,temp,moving,grade_smooth"))) |> GET()
#     
#     stop_for_status(request)
#     
#     temp <- fromJSON(content(request, as = "text"), flatten = TRUE) |> as_tibble() |> mutate(id = i)
#     
#     df_clean_running_temp <- rbind(df_clean_running_temp, temp)
#     
#   }
#   
#   # Turn microdata in wide format
#   df_clean_running_temp <- pivot_wider(df_clean_running_temp, names_from = type, values_from = data)
#   
#   # Clean microdata
#   df_clean_running_temp <- df_clean_running_temp |>
#     mutate(lat = map_if(.x = latlng, .p = ~ !is.null(.x), .f = ~ .x[, 1]),
#            lng = map_if(.x = latlng, .p = ~ !is.null(.x), .f = ~ .x[, 2])) |>
#     select(-c(latlng, original_size, resolution, series_type)) |>
#     unnest(where(is_list)) |>
#     rename(cdistance = distance, ctime = time)
#   
#   # Combine all data
#   df_clean_running <- df_clean_running_temp |> left_join(df_clean_running, by = "id") |>
#     select(id, date, type, distance, time, elevation, hr, hrmax, speed, speed_max, pace, pace_max, geo, everything())
#   
#   # Append data to existing dataframe
#   df_running <- rbind(df_running, df_clean_running)
#   
#   # Cancel if no new microdata was found
# } else {"No new running microdata found."}
# 
# ##-------#######-------##
# ##-------CYCLING-------##
# ##-------#######-------##
# 
# # Subset data
# df_clean_cycling <- df_clean |> filter(type == "Ride")
# 
# # Cleaning for CYCLING dataframe
# df_clean_cycling <- df_clean_cycling |>
#   filter(geo == 1) |> # only when microdata is available
#   filter(distance >= 5000) |> # only sessions with at least 5km cycling
#   filter(time >= 300) |> # only sessions with at least 5min cycling
#   filter(!is.na(hr)) |> # only sessions with non-missing HR data
#   arrange(id) # sort by id number
# 
# # Add data for speed (km/h)
# df_clean_cycling$speed <- round((df_clean_cycling$distance/1000) / (df_clean_cycling$time/60/60), 2)
# 
# # Add data for pace (min/km)
# df_clean_cycling$pace <- round((df_clean_cycling$time/60) / (df_clean_cycling$distance/1000), 2)
# 
# # Add data for pace_max (min/km)
# df_clean_cycling$pace_max <- 60 / df_clean_cycling$speed_max
# 
# # Proceed only if new cycling data with microdata was found
# if (nrow(df_clean_cycling) >=1) {
#   
#   # Initialize a microdataframe
#   df_clean_cycling_temp <- data.frame()
#   
#   # Retrieve microdata
#   for (i in unique(df_clean_cycling$id)){
#     
#     url <- parse_url(str_glue("https://www.strava.com/api/v3/activities/{i}/streams"))
#     
#     request <- modify_url(url, query = list(access_token = access_token, keys = str_glue("distance,time,latlng,altitude,velocity_smooth,cadence,watts,temp,moving,grade_smooth"))) |> GET()
#     
#     stop_for_status(request)
#     
#     temp <- fromJSON(content(request, as = "text"), flatten = TRUE) |> as_tibble() |> mutate(id = i)
#     
#     df_clean_cycling_temp <- rbind(df_clean_cycling_temp, temp)
#     
#   }
#   
#   # Turn microdata in wide format
#   df_clean_cycling_temp <- pivot_wider(df_clean_cycling_temp, names_from = type, values_from = data)
#   
#   # Clean microdata
#   df_clean_cycling_temp <- df_clean_cycling_temp |>
#     mutate(lat = map_if(.x = latlng, .p = ~ !is.null(.x), .f = ~ .x[, 1]),
#            lng = map_if(.x = latlng, .p = ~ !is.null(.x), .f = ~ .x[, 2])) |>
#     select(-c(latlng, original_size, resolution, series_type)) |>
#     unnest(where(is_list)) |>
#     rename(cdistance = distance, ctime = time)
#   
#   # Combine all data
#   df_clean_cycling <- df_clean_cycling_temp |> left_join(df_clean_cycling, by = "id") |>
#     select(id, date, type, distance, time, elevation, hr, hrmax, speed, speed_max, pace, pace_max, geo, everything())
#   
#   # Append data to existing dataframe
#   df_cycling <- rbind(df_cycling, df_clean_cycling)
#   
#   # Cancel if no new microdata was found
# } else {"No new cycling microdata found."}
# 
# ##-------########-------##
# ##-------SWIMMING-------##
# ##-------########-------##
# 
# # Subset data
# df_clean_swimming <- df_clean |> filter(type == "Swim")
# 
# # Cleaning for SWIMMING dataframe
# df_clean_swimming <- df_clean_swimming |>
#   filter(distance >= 250) |> # only sessions with at least 250m swimming
#   filter(time >= 600) |> # only sessions with at least 10min swimming
#   filter(!is.na(hr)) |> # only sessions with non-missing HR data
#   arrange(id) # sort by id number
# 
# # Add data for speed (km/h)
# df_clean_swimming$speed <- round((df_clean_swimming$distance/1000) / (df_clean_swimming$time/60/60), 2)
# 
# # Add data for pace (min/km)
# df_clean_swimming$pace <- round((df_clean_swimming$time/60) / (df_clean_swimming$distance/1000), 2)
# 
# # Proceed only if new swimming data with microdata was found
# if (nrow(df_clean_swimming) >=1) {
#   
#   # Initialize a microdataframe
#   df_clean_swimming_temp <- data.frame()
#   
#   # Retrieve microdata
#   for (i in unique(df_clean_swimming$id)){
#     
#     url <- parse_url(str_glue("https://www.strava.com/api/v3/activities/{i}/streams"))
#     
#     request <- modify_url(url, query = list(access_token = access_token, keys = str_glue("distance,time,latlng,altitude,velocity_smooth,cadence,watts,temp,moving,grade_smooth"))) |> GET()
#     
#     stop_for_status(request)
#     
#     temp <- fromJSON(content(request, as = "text"), flatten = TRUE) |> as_tibble() |> mutate(id = i)
#     
#     df_clean_swimming_temp <- rbind(df_clean_swimming_temp, temp)
#     
#   }
#   
#   # Turn microdata in wide format
#   df_clean_swimming_temp <- pivot_wider(df_clean_swimming_temp, names_from = type, values_from = data)
#   
#   # Clean microdata
#   df_clean_swimming_temp <- df_clean_swimming_temp |>
#     select(-c(original_size, resolution, series_type)) |>
#     unnest(where(is_list)) |>
#     rename(cdistance = distance, ctime = time)
#   
#   # Combine all data
#   df_clean_swimming <- df_clean_swimming_temp |> left_join(df_clean_swimming, by = "id") |>
#     select(id, date, type, distance, time, elevation, hr, hrmax, speed, pace, geo, everything())
#   
#   # Append data to existing dataframe
#   df_swimming <- rbind(df_swimming, df_clean_swimming)
#   
#   # Cancel if no new microdata was found
# } else {"No new swimming microdata found."}
# 
# # Clean global environment
# suppressWarnings({
#   rm(request, temp, url, i, access_token, saved_id, df_clean,
#      df_clean_running, df_clean_running_temp,
#      df_clean_cycling, df_clean_cycling_temp,
#      df_clean_swimming, df_clean_swimming_temp)
# })
# 
# # Clean memory
# gc()

##================================================================
##================================================================
## SECTION 3: Data visualization
##================================================================
##================================================================

# Subset data to current year
df_running_365 <- df_running |> distinct(id, .keep_all = TRUE) |> filter(date >= paste0(substr(Sys.Date(), 1, 4), "-01-01"))
df_cycling_365 <- df_cycling |> distinct(id, .keep_all = TRUE) |> filter(date >= paste0(substr(Sys.Date(), 1, 4), "-01-01"))
df_swimming_365 <- df_swimming |> distinct(id, .keep_all = TRUE) |> filter(date >= paste0(substr(Sys.Date(), 1, 4), "-01-01"))

# Subset data to all years
df_running_all <- df_running |> distinct(id, .keep_all = TRUE)
df_cycling_all <- df_cycling |> distinct(id, .keep_all = TRUE)
df_swimming_all <- df_swimming |> distinct(id, .keep_all = TRUE)

##-------#######-------##
##-------RUNNING-------##
##-------#######-------##

##------------##
##--CALENDAR--##
##------------##

# Generate full year calendar
year_dates <- data.frame(date = seq.Date(from = as.Date(paste0(format(Sys.Date(), "%Y"), "-01-01")), to = as.Date(paste0(format(Sys.Date(), "%Y"), "-12-31")), by = "day"))

# Add week number and day of week
calendar <- year_dates |> left_join(df_running_365 |> group_by(date) |> summarise(distance = sum(distance, na.rm = TRUE)), by = "date") |> mutate(week = isoweek(date), day = wday(date, label = TRUE, abbr = FALSE, week_start = 1))

# Find last day of week 52
last_match <- match(52, rev(calendar$week)); if (!is.na(last_match)) {last_match <- length(calendar$week) - last_match + 1}

# Add extra days as week = 53
calendar$week[(last_match+1):nrow(calendar)] <- 53

# Extract extra days
week_53_rows <- calendar[calendar$week == 53, ]

# Get the last row's date from week_53_rows
last_date <- max(week_53_rows$date)

# Determine the weekday of the last date (e.g., Wednesday = 3, Thursday = 4, etc.)
last_day_of_week <- weekdays(last_date)

# Define the missing days based on the last day of the week
days_needed <- NULL
if (last_day_of_week == "Monday") {days_needed <- c("Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Tuesday") {days_needed <- c("Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Wednesday") {days_needed <- c("Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Thursday") {days_needed <- c("Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Friday") {days_needed <- c("Saturday", "Sunday")
} else if (last_day_of_week == "Saturday") {days_needed <- c("Sunday")
}

# If days are needed, create a new dataframe with the extra days
if (length(days_needed) > 0) {
  
  # Determine extra day data
  extra_days <- data.frame(date = rep(NA, length(days_needed)), distance = rep(0, length(days_needed)), week = rep(53, length(days_needed)), day = days_needed)
  
  # Append the extra days to the original week_53_rows
  calendar <- rbind(calendar, extra_days)
}

# Determine first day in week 1
first_day <- calendar$day[1]

# Define the missing days based on the first day of the year
days_needed <- NULL
if (first_day == "Monday") {NULL
} else if (first_day == "Tuesday") {days_needed <- c("Monday")
} else if (first_day == "Wednesday") {days_needed <- c("Monday", "Tuesday")
} else if (first_day == "Thursday") {days_needed <- c("Monday", "Tuesday", "Wednesday")
} else if (first_day == "Friday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday")
} else if (first_day == "Saturday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
} else if (first_day == "Sunday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
}

# If days are needed, create a new dataframe with the extra days
if (length(days_needed) > 0) {
  
  # Determine extra day data
  extra_days <- data.frame(date = rep(NA, length(days_needed)), distance = rep(0, length(days_needed)), week = rep(1, length(days_needed)), day = days_needed)
  
  # Append the extra days to the original week_53_rows
  calendar <- rbind(calendar, extra_days)
}

# Convert missings to zero
calendar$distance <- ifelse(is.na(calendar$distance), 0, calendar$distance)

# Add row numbers
calendar <- calendar |> mutate(num = row_number())

# Shorten day names
calendar$day <- substr(calendar$day, 1, 3)

# Fix factor level order
calendar$day <- factor(calendar$day, levels = c("Sun", "Sat", "Fri", "Thu", "Wed", "Tue", "Mon"))

# Generate plot
plot_calendar_running <- plot_ly(data = calendar, x = ~week, y = ~day, z = ~distance, 
                                 type = "heatmap", colors = c("#2d2d2d", "#00bc8c"),
                                 zmin = 0,
                                 zmax = max(calendar$distance),
                                 showscale = FALSE,
                                 text = ~paste(wday(calendar$date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(calendar$date), "%d/%m/%y"), "<br>Distance:", round(calendar$distance / 1000, 0), "km"),
                                 hoverinfo = 'text',
                                 opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d",
         plot_bgcolor="#2d2d2d",
         yaxis = list(tickfont = list(size=10, color="#00bc8c"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", fixedrange = TRUE, side ="top", gridcolor = "#00bc8c", gridwidth = 0.25),
         xaxis = list(tickfont = list(size=10, color="#00bc8c"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", tickmode = "array", tickvals = seq(1, 53, by = 1), tickangle = -90, ticktext = sprintf("%02d", seq(1, 53, by = 1)), fixedrange = TRUE, gridcolor = "#00bc8c", gridwidth = 0.25),
         margin = list(l = 20, r = 20, t = 10, b = 20))

##------------##
##--DISTANCE--##
##------------##

data_plot_running_distance <- df_running_365 %>% arrange(distance) %>% mutate(distance = distance / 1000, time = time / 60, num = row_number(), bar_color = ifelse(date == max(date), "#f39c12", "#00bc8c"))
plot_distance_running <- plot_ly(data = data_plot_running_distance, x = ~num, y = ~distance,
                                 type = "bar",
                                 marker = list(color = ~bar_color, size = 12.5, line = list(color = "black", width = 1)), 
                                 text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "km", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 0), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hrmax, 0), "bpm"),
                                 hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d",
         annotations = list(
           list(x = 0.05, y = 0.95, xref = "paper", yref = "paper",
                text = "<span style='color:#f39c12; border:1px solid black;'>&#9632;</span> <span style='color:#f39c12'>Most recent session</span><br><span style='color:#00bc8c'>&#9632;</span> <span style='color:#00bc8c'>All other sessions</span>",
                showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left")),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#00bc8c"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
         margin = list(l = 0, r = 0, t = 0, b = 0))

##--------##
##--TIME--##
##--------##

data_plot_running_time <- df_running_365 %>% arrange(time) %>% mutate(distance = distance / 1000, time = time / 60, num = row_number(), bar_color = ifelse(date == max(date), "#f39c12", "#00bc8c"))
plot_time_running <- plot_ly(data = data_plot_running_time, x = ~num, y = ~time,
                             type = "bar",
                             marker = list(color = ~bar_color, size = 12.5, line = list(color = "black", width = 1)), 
                             text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "km", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 0), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hrmax, 0), "bpm"),
                             hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d",
         annotations = list(
           list(x = 0.05, y = 0.95, xref = "paper", yref = "paper",
                text = "<span style='color:#f39c12; border:1px solid black;'>&#9632;</span> <span style='color:#f39c12'>Most recent session</span><br><span style='color:#00bc8c'>&#9632;</span> <span style='color:#00bc8c'>All other sessions</span>",
                showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left")),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#00bc8c"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
         margin = list(l = 0, r = 0, t = 0, b = 0))

##--------##
##--PACE--##
##--------##

data_plot_running_pace <- df_running_365 %>% arrange(desc(pace)) %>% mutate(distance = distance / 1000, time = time / 60, num = row_number())
colors_pace <- ifelse(data_plot_running_pace$id == max(data_plot_running_pace$id), "#f39c12", "#00bc8c")
plot_pace_running <- plot_ly(data = data_plot_running_pace, x = ~num, y = ~pace, type = "scatter",
                             marker = list(color = ~colors_pace, size = 12.5, line = list(color = "black", width = 1)), mode = "markers",
                             text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "km", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 0), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hrmax, 0), "bpm"),
                             hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d",
         annotations = c(
           list(list(x = 0.95, y = 0.95, xref = "paper", yref = "paper",
                     text = "<span style='color:#f39c12'>Most recent session</span> <span style='color:#f39c12; border:1px solid black;'>&#x25CF;</span><br><span style='color:#00bc8c'>All other sessions</span> <span style='color:#00bc8c'>&#x25CF;</span>",
                     showarrow = FALSE, font = list(size = 15), xanchor = "right", yanchor = "top", align = "right"))),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#00bc8c"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25,
                      range = c(5, 9.5), tickvals = seq(5, 9.5, by = 0.5), ticktext = c("5:00", "5:30", "6:00", "6:30", "7:00", "7:30", "8:00", "8:30", "9:00", "9:30")),
         margin = list(l = 0, r = 0, t = 0, b = 0))

##------##
##--HR--##
##------##

data_plot_running_hr <- df_running_365 %>% arrange((hr)) %>% mutate(distance = distance / 1000, time = time / 60, num = row_number())
colors_hr <- ifelse(data_plot_running_hr$id == max(data_plot_running_hr$id), "#f39c12", "#00bc8c")
hr1 <- 138; hr2 <- 150; hr3 <- 162; hr4 <- 174
plot_hr_running <- plot_ly(data = data_plot_running_hr, x = ~num, y = ~hr, type = "scatter",
                           marker = list(color = ~colors_hr, size = 12.5, line = list(color = "black", width = 1)), mode = "markers",
                           text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "km", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 0), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hrmax, 0), "bpm"),
                           hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d",
         annotations = c(
           list(list(x = 0.075, y = 0.95, xref = "paper", yref = "paper",
                     text = "<span style='color:#f39c12; border:1px solid black;'>&#x25CF;</span> <span style='color:#f39c12'>Most recent session</span><br><span style='color:#00bc8c'>&#x25CF;</span> <span style='color:#00bc8c'>All other sessions</span>",
                     showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left"),
                list(x = 0.025, y = (min(data_plot_running_hr$hr)-5+hr1)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 1</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
                list(x = 0.025, y = (hr1+hr2)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 2</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
                list(x = 0.025, y = (hr2+hr3)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 3</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
                list(x = 0.025, y = (hr3+hr4)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 4</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
                list(x = 0.025, y = (hr4+max(data_plot_running_hr$hrmax)+5)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 5</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"))),
         shapes = lapply(1:nrow(data_plot_running_hr), function(i) {
           list(type = "line",
                x0 = data_plot_running_hr$num[i], x1 = data_plot_running_hr$num[i],
                y0 = data_plot_running_hr$hr[i], y1 = data_plot_running_hr$hrmax[i],
                line = list(color = ifelse(i == match(max(data_plot_running_hr$id), data_plot_running_hr$id),
                                           rgb(col2rgb("#f39c12")[1]/255,col2rgb("#f39c12")[2]/255,col2rgb("#f39c12")[3]/255, 0.25),
                                           rgb(col2rgb("#00bc8c")[1]/255,col2rgb("#00bc8c")[2]/255,col2rgb("#00bc8c")[3]/255, 0.25)), width = 5) )}),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#00bc8c"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25,
                      range = c(min(data_plot_running_hr$hr)-5, max(data_plot_running_hr$hrmax)+5), tickvals = c(hr1, hr2, hr3, hr4), ticktext = as.character(c(hr1, hr2, hr3, hr4))),
         margin = list(l = 25, r = 0, t = 0, b = 0))

##------------##
##--MAP-LAST--##
##------------##

df_running_sub <- df_running %>% filter(id %in% unique(df_running_365$id)) %>% filter(id == (df_running_365 %>% group_by(id) %>% arrange(date) %>% slice_tail(n = 1) %>% ungroup() %>% filter(date == max(date, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map1_running <- leaflet(df_running_sub) %>%
  addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
  addPolylines(lng = df_running_sub$lng, lat = df_running_sub$lat, color = "#54b98f", weight = 2.5, opacity = 1.00)

##------------##
##--MAP-FAST--##
##------------##

df_running_sub <- df_running %>% filter(id %in% unique(df_running_365$id)) %>% filter(id == (df_running_365 %>% group_by(id) %>% arrange(speed) %>% slice_tail(n = 1) %>% ungroup() %>% filter(speed == max(speed, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map2_running <- leaflet(df_running_sub) %>%
  addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
  addPolylines(lng = df_running_sub$lng, lat = df_running_sub$lat, color = "#54b98f", weight = 2.5, opacity = 1.00)

##------------##
##--MAP-LONG--##
##------------##

df_running_sub <- df_running %>% filter(id %in% unique(df_running_365$id))  %>% filter(id == (df_running_365 %>% group_by(id) %>% arrange(distance) %>% slice_tail(n = 1) %>% ungroup() %>% filter(distance == max(distance, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map3_running <- leaflet(df_running_sub) %>%
  addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
  addPolylines(lng = df_running_sub$lng, lat = df_running_sub$lat, color = "#54b98f", weight = 2.5, opacity = 1.00)

##-------#######-------##
##-------CYCLING-------##
##-------#######-------##

##------------##
##--CALENDAR--##
##------------##

# Generate full year calendar
year_dates <- data.frame(date = seq.Date(from = as.Date(paste0(format(Sys.Date(), "%Y"), "-01-01")), to = as.Date(paste0(format(Sys.Date(), "%Y"), "-12-31")), by = "day"))

# Add week number and day of week
calendar <- year_dates |> left_join(df_cycling_365 |> group_by(date) |> summarise(distance = sum(distance, na.rm = TRUE)), by = "date") |> mutate(week = isoweek(date), day = wday(date, label = TRUE, abbr = FALSE, week_start = 1))

# Find last day of week 52
last_match <- match(52, rev(calendar$week)); if (!is.na(last_match)) {last_match <- length(calendar$week) - last_match + 1}

# Add extra days as week = 53
calendar$week[(last_match+1):nrow(calendar)] <- 53

# Extract extra days
week_53_rows <- calendar[calendar$week == 53, ]

# Get the last row's date from week_53_rows
last_date <- max(week_53_rows$date)

# Determine the weekday of the last date (e.g., Wednesday = 3, Thursday = 4, etc.)
last_day_of_week <- weekdays(last_date)

# Define the missing days based on the last day of the week
days_needed <- NULL
if (last_day_of_week == "Monday") {days_needed <- c("Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Tuesday") {days_needed <- c("Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Wednesday") {days_needed <- c("Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Thursday") {days_needed <- c("Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Friday") {days_needed <- c("Saturday", "Sunday")
} else if (last_day_of_week == "Saturday") {days_needed <- c("Sunday")
}

# If days are needed, create a new dataframe with the extra days
if (length(days_needed) > 0) {
  
  # Determine extra day data
  extra_days <- data.frame(date = rep(NA, length(days_needed)), distance = rep(0, length(days_needed)), week = rep(53, length(days_needed)), day = days_needed)
  
  # Append the extra days to the original week_53_rows
  calendar <- rbind(calendar, extra_days)
}

# Determine first day in week 1
first_day <- calendar$day[1]

# Define the missing days based on the first day of the year
days_needed <- NULL
if (first_day == "Monday") {NULL
} else if (first_day == "Tuesday") {days_needed <- c("Monday")
} else if (first_day == "Wednesday") {days_needed <- c("Monday", "Tuesday")
} else if (first_day == "Thursday") {days_needed <- c("Monday", "Tuesday", "Wednesday")
} else if (first_day == "Friday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday")
} else if (first_day == "Saturday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
} else if (first_day == "Sunday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
}

# If days are needed, create a new dataframe with the extra days
if (length(days_needed) > 0) {
  
  # Determine extra day data
  extra_days <- data.frame(date = rep(NA, length(days_needed)), distance = rep(0, length(days_needed)), week = rep(1, length(days_needed)), day = days_needed)
  
  # Append the extra days to the original week_53_rows
  calendar <- rbind(calendar, extra_days)
}

# Convert missings to zero
calendar$distance <- ifelse(is.na(calendar$distance), 0, calendar$distance)

# Add row numbers
calendar <- calendar |> mutate(num = row_number())

# Shorten day names
calendar$day <- substr(calendar$day, 1, 3)

# Fix factor level order
calendar$day <- factor(calendar$day, levels = c("Sun", "Sat", "Fri", "Thu", "Wed", "Tue", "Mon"))

# Generate plot
plot_calendar_cycling <- plot_ly(data = calendar, x = ~week, y = ~day, z = ~distance, 
                                 type = "heatmap", colors = c("#2d2d2d", "#f39c12"),
                                 zmin = 0,
                                 zmax = max(calendar$distance),
                                 showscale = FALSE,
                                 text = ~paste(wday(calendar$date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(calendar$date), "%d/%m/%y"), "<br>Distance:", round(calendar$distance / 1000, 0), "km"),
                                 hoverinfo = 'text',
                                 opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d",
         plot_bgcolor="#2d2d2d",
         yaxis = list(tickfont = list(size=10, color="#f39c12"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", fixedrange = TRUE, side ="top", gridcolor = "#f39c12", gridwidth = 0.25),
         xaxis = list(tickfont = list(size=10, color="#f39c12"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", tickmode = "array", tickvals = seq(1, 53, by = 1), tickangle = -90, ticktext = sprintf("%02d", seq(1, 53, by = 1)), fixedrange = TRUE, gridcolor = "#f39c12", gridwidth = 0.25),
         margin = list(l = 20, r = 20, t = 10, b = 20))

##------------##
##--DISTANCE--##
##------------##

data_plot_cycling_distance <- df_cycling_365 %>% arrange(distance) %>% mutate(distance = distance / 1000, time = time / 60, num = row_number(), bar_color = ifelse(date == max(date), "#3498db", "#f39c12"))
plot_distance_cycling <- plot_ly(data = data_plot_cycling_distance, x = ~num, y = ~distance,
                                 type = "bar",
                                 marker = list(color = ~bar_color, size = 12.5, line = list(color = "black", width = 1)), 
                                 text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "km", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 0), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hrmax, 0), "bpm"),
                                 hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d",
         annotations = list(
           list(x = 0.05, y = 0.95, xref = "paper", yref = "paper",
                text = "<span style='color:#3498db; border:1px solid black;'>&#9632;</span> <span style='color:#3498db'>Most recent session</span><br><span style='color:#f39c12'>&#9632;</span> <span style='color:#f39c12'>All other sessions</span>",
                showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left")),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#f39c12"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
         margin = list(l = 0, r = 0, t = 0, b = 0))

##--------##
##--TIME--##
##--------##

data_plot_cycling_time <- df_cycling_365 %>% arrange(time) %>% mutate(distance = distance / 1000, time = time / 60, num = row_number(), bar_color = ifelse(date == max(date), "#3498db", "#f39c12"))
plot_time_cycling <- plot_ly(data = data_plot_cycling_time, x = ~num, y = ~time,
                             type = "bar",
                             marker = list(color = ~bar_color, size = 12.5, line = list(color = "black", width = 1)), 
                             text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "km", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 0), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hrmax, 0), "bpm"),
                             hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d",
         annotations = list(
           list(x = 0.05, y = 0.95, xref = "paper", yref = "paper",
                text = "<span style='color:#3498db; border:1px solid black;'>&#9632;</span> <span style='color:#3498db'>Most recent session</span><br><span style='color:#f39c12'>&#9632;</span> <span style='color:#f39c12'>All other sessions</span>",
                showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left")),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#f39c12"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
         margin = list(l = 0, r = 0, t = 0, b = 0))

##---------##
##--SPEED--##
##---------##

data_plot_cycling_speed <- df_cycling_365 %>% arrange((speed)) %>% mutate(distance = distance / 1000, time = time / 60, num = row_number())
colors_pace <- ifelse(data_plot_cycling_speed$id == max(data_plot_cycling_speed$id), "#3498db", "#f39c12")
plot_pace_cycling <- plot_ly(data = data_plot_cycling_speed, x = ~num, y = ~speed, type = "scatter",
                             marker = list(color = ~colors_pace, size = 12.5, line = list(color = "black", width = 1)), mode = "markers",
                             text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "km", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 0), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hrmax, 0), "bpm"),
                             hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d",
         annotations = c(
           list(list(x = 0.05, y = 0.95, xref = "paper", yref = "paper",
                     text = "<span style='color:#3498db; border:1px solid black;'>&#x25CF;</span> <span style='color:#3498db'>Most recent session</span><br><span style='color:#f39c12'>&#x25CF;</span> <span style='color:#f39c12'>All other sessions</span>",
                     showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left"))),
         shapes = lapply(1:nrow(data_plot_cycling_speed), function(i) {
           list(type = "line",
                x0 = data_plot_cycling_speed$num[i], x1 = data_plot_cycling_speed$num[i],
                y0 = data_plot_cycling_speed$speed[i], y1 = data_plot_cycling_speed$speed_max[i],
                line = list(color = ifelse(i == match(max(data_plot_cycling_speed$id), data_plot_cycling_speed$id),
                                           rgb(col2rgb("#3498db")[1]/255,col2rgb("#3498db")[2]/255,col2rgb("#3498db")[3]/255, 0.25),
                                           rgb(col2rgb("#f39c12")[1]/255,col2rgb("#f39c12")[2]/255,col2rgb("#f39c12")[3]/255, 0.25)), width = 5) )}),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#f39c12"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25,
                      range = c(min(data_plot_cycling_speed$speed)-5, max(data_plot_cycling_speed$speed_max)+5)),
         margin = list(l = 0, r = 0, t = 0, b = 0))

##------##
##--HR--##
##------##

data_plot_cycling_hr <- df_cycling_365 %>% arrange((hr)) %>% mutate(distance = distance / 1000, time = time / 60, num = row_number())
colors_hr <- ifelse(data_plot_cycling_hr$id == max(data_plot_cycling_hr$id), "#3498db", "#f39c12")
hr1 <- 138; hr2 <- 150; hr3 <- 162; hr4 <- 174
plot_hr_cycling <- plot_ly(data = data_plot_cycling_hr, x = ~num, y = ~hr, type = "scatter",
                           marker = list(color = ~colors_hr, size = 12.5, line = list(color = "black", width = 1)), mode = "markers",
                           text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "km", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 0), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hrmax, 0), "bpm"),
                           hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d",
         annotations = c(
           list(list(x = 0.075, y = 0.95, xref = "paper", yref = "paper",
                     text = "<span style='color:#3498db; border:1px solid black;'>&#x25CF;</span> <span style='color:#3498db'>Most recent session</span><br><span style='color:#f39c12'>&#x25CF;</span> <span style='color:#f39c12'>All other sessions</span>",
                     showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left"),
                list(x = 0.025, y = (min(data_plot_cycling_hr$hr)-5+hr1)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 1</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
                list(x = 0.025, y = (hr1+hr2)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 2</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
                list(x = 0.025, y = (hr2+hr3)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 3</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
                list(x = 0.025, y = (hr3+hr4)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 4</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
                list(x = 0.025, y = (hr4+max(data_plot_cycling_hr$hrmax)+5)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 5</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"))),
         shapes = lapply(1:nrow(data_plot_cycling_hr), function(i) {
           list(type = "line",
                x0 = data_plot_cycling_hr$num[i], x1 = data_plot_cycling_hr$num[i],
                y0 = data_plot_cycling_hr$hr[i], y1 = data_plot_cycling_hr$hrmax[i],
                line = list(color = ifelse(i == match(max(data_plot_cycling_hr$id), data_plot_cycling_hr$id),
                                           rgb(col2rgb("#3498db")[1]/255,col2rgb("#3498db")[2]/255,col2rgb("#3498db")[3]/255, 0.25),
                                           rgb(col2rgb("#f39c12")[1]/255,col2rgb("#f39c12")[2]/255,col2rgb("#f39c12")[3]/255, 0.25)), width = 5) )}),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#f39c12"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25,
                      range = c(min(data_plot_cycling_hr$hr)-5, max(data_plot_cycling_hr$hrmax)+5), tickvals = c(hr1, hr2, hr3, hr4), ticktext = as.character(c(hr1, hr2, hr3, hr4))),
         margin = list(l = 25, r = 0, t = 0, b = 0))

##------------##
##--MAP-LAST--##
##------------##

df_cycling_sub <- df_cycling %>% filter(id %in% unique(df_cycling_365$id)) %>% filter(id == (df_cycling_365 %>% group_by(id) %>% arrange(date) %>% slice_tail(n = 1) %>% ungroup() %>% filter(date == max(date, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map1_cycling <- leaflet(df_cycling_sub) %>%
  addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
  addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00)

##------------##
##--MAP-FAST--##
##------------##

df_cycling_sub <- df_cycling %>% filter(id %in% unique(df_cycling_365$id)) %>% filter(id == (df_cycling_365 %>% group_by(id) %>% arrange(speed) %>% slice_tail(n = 1) %>% ungroup() %>% filter(speed == max(speed, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map2_cycling <- leaflet(df_cycling_sub) %>%
  addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
  addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00)

##------------##
##--MAP-LONG--##
##------------##

df_cycling_sub <- df_cycling %>% filter(id %in% unique(df_cycling_365$id))  %>% filter(id == (df_cycling_365 %>% group_by(id) %>% arrange(distance) %>% slice_tail(n = 1) %>% ungroup() %>% filter(distance == max(distance, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map3_cycling <- leaflet(df_cycling_sub) %>%
  addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
  addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00)

##-------########-------##
##-------SWIMMING-------##
##-------########-------##

# Generate full year calendar
year_dates <- data.frame(date = seq.Date(from = as.Date(paste0(format(Sys.Date(), "%Y"), "-01-01")), to = as.Date(paste0(format(Sys.Date(), "%Y"), "-12-31")), by = "day"))

# Add week number and day of week
calendar <- year_dates |> left_join(df_swimming_365 |> group_by(date) |> summarise(distance = sum(distance, na.rm = TRUE)), by = "date") |> mutate(week = isoweek(date), day = wday(date, label = TRUE, abbr = FALSE, week_start = 1))

# Convert missings to zero
calendar$distance <- ifelse(is.na(calendar$distance), 0, calendar$distance)

# Find last day of week 52
last_match <- match(52, rev(calendar$week)); if (!is.na(last_match)) {last_match <- length(calendar$week) - last_match + 1}

# Add extra days as week = 53
calendar$week[(last_match+1):nrow(calendar)] <- 53

# Extract extra days
week_53_rows <- calendar[calendar$week == 53, ]

# Get the last row's date from week_53_rows
last_date <- max(week_53_rows$date)

# Determine the weekday of the last date (e.g., Wednesday = 3, Thursday = 4, etc.)
last_day_of_week <- weekdays(last_date)

# Define the missing days based on the last day of the week
days_needed <- NULL
if (last_day_of_week == "Monday") {days_needed <- c("Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Tuesday") {days_needed <- c("Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Wednesday") {days_needed <- c("Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Thursday") {days_needed <- c("Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Friday") {days_needed <- c("Saturday", "Sunday")
} else if (last_day_of_week == "Saturday") {days_needed <- c("Sunday")
}

# If days are needed, create a new dataframe with the extra days
if (length(days_needed) > 0) {
  
  # Determine extra day data
  extra_days <- data.frame(date = rep(NA, length(days_needed)), distance = rep(0, length(days_needed)), week = rep(53, length(days_needed)), day = days_needed)
  
  # Append the extra days to the original week_53_rows
  calendar <- rbind(calendar, extra_days)
}

# Determine first day in week 1
first_day <- calendar$day[1]

# Define the missing days based on the first day of the year
days_needed <- NULL
if (first_day == "Monday") {NULL
} else if (first_day == "Tuesday") {days_needed <- c("Monday")
} else if (first_day == "Wednesday") {days_needed <- c("Monday", "Tuesday")
} else if (first_day == "Thursday") {days_needed <- c("Monday", "Tuesday", "Wednesday")
} else if (first_day == "Friday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday")
} else if (first_day == "Saturday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
} else if (first_day == "Sunday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
}

# If days are needed, create a new dataframe with the extra days
if (length(days_needed) > 0) {
  
  # Determine extra day data
  extra_days <- data.frame(date = rep(NA, length(days_needed)), distance = rep(0, length(days_needed)), week = rep(1, length(days_needed)), day = days_needed)
  
  # Append the extra days to the original week_53_rows
  calendar <- rbind(calendar, extra_days)
}

# Add row numbers
calendar <- calendar |> mutate(num = row_number())

# Shorten day names
calendar$day <- substr(calendar$day, 1, 3)

# Fix factor level order
calendar$day <- factor(calendar$day, levels = c("Sun", "Sat", "Fri", "Thu", "Wed", "Tue", "Mon"))

# Generate plot
plot_calendar_swimming <- plot_ly(data = calendar, x = ~week, y = ~day, z = ~distance, 
                                  type = "heatmap", colors = c("#2d2d2d", "#3498db"),
                                  zmin = 0,
                                  zmax = max(calendar$distance),
                                  showscale = FALSE,
                                  text = ~paste(wday(calendar$date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(calendar$date), "%d/%m/%y"), "<br>Distance:", round(calendar$distance, 0), "m"),
                                  hoverinfo = 'text',
                                  opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d",
         plot_bgcolor="#2d2d2d",
         yaxis = list(tickfont = list(size=10, color="#3498db"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", fixedrange = TRUE, side ="top", gridcolor = "#3498db", gridwidth = 0.25),
         xaxis = list(tickfont = list(size=10, color="#3498db"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", tickmode = "array", tickvals = seq(1, 53, by = 1), tickangle = -90, ticktext = sprintf("%02d", seq(1, 53, by = 1)), fixedrange = TRUE, gridcolor = "#3498db", gridwidth = 0.25),
         margin = list(l = 20, r = 20, t = 20, b = 20))

# Clean global environment
rm(extra_days, week_53_rows, year_dates, days_needed, first_day, last_date, last_day_of_week, last_match)

##------------##
##--DISTANCE--##
##------------##

data_plot_swimming_distance <- df_swimming_365 %>% arrange(distance) %>% mutate(pace = pace/10, distance = distance, time = time / 60, num = row_number(), bar_color = ifelse(date == max(date), "#00bc8c", "#3498db"))
plot_distance_swimming <- plot_ly(data = data_plot_swimming_distance, x = ~num, y = ~distance,
                                  type = "bar",
                                  marker = list(color = ~bar_color, size = 12.5, line = list(color = "black", width = 1)), 
                                  text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "m", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/100m"), "<br>Speed:", paste0(round(df_swimming_365$speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hrmax, 0), "bpm"),
                                  hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d",
         annotations = list(
           list(x = 0.05, y = 0.95, xref = "paper", yref = "paper",
                text = "<span style='color:#00bc8c; border:1px solid black;'>&#9632;</span> <span style='color:#00bc8c'>Most recent session</span><br><span style='color:#3498db'>&#9632;</span> <span style='color:#3498db'>All other sessions</span>",
                showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left")),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#3498db"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
         margin = list(l = 0, r = 0, t = 0, b = 0))

##--------##
##--TIME--##
##--------##

data_plot_swimming_time <- df_swimming_365 %>% arrange(time) %>% mutate(pace = pace/10, distance = distance, time = time / 60, num = row_number(), bar_color = ifelse(date == max(date), "#00bc8c", "#3498db"))
plot_time_swimming <- plot_ly(data = data_plot_swimming_time, x = ~num, y = ~time,
                              type = "bar",
                              marker = list(color = ~bar_color, size = 12.5, line = list(color = "black", width = 1)), 
                              text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "m", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/100m"), "<br>Speed:", paste0(round(df_swimming_365$speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hrmax, 0), "bpm"),
                              hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d",
         annotations = list(
           list(x = 0.05, y = 0.95, xref = "paper", yref = "paper",
                text = "<span style='color:#00bc8c; border:1px solid black;'>&#9632;</span> <span style='color:#00bc8c'>Most recent session</span><br><span style='color:#3498db'>&#9632;</span> <span style='color:#3498db'>All other sessions</span>",
                showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left")),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#3498db"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
         margin = list(l = 0, r = 0, t = 0, b = 0))

##--------##
##--PACE--##
##--------##

data_plot_swimming_pace <- df_swimming_365 %>% arrange(desc(pace)) %>% mutate(pace = pace/10, distance = distance, time = time / 60, num = row_number())
colors_pace <- ifelse(data_plot_swimming_pace$id == max(data_plot_swimming_pace$id), "#00bc8c", "#3498db")
plot_pace_swimming <- plot_ly(data = data_plot_swimming_pace, x = ~num, y = ~pace, type = "scatter",
                              marker = list(color = ~colors_pace, size = 12.5, line = list(color = "black", width = 1)), mode = "markers",
                              text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "m", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/100m"), "<br>Speed:", paste0(round(df_swimming_365$speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hrmax, 0), "bpm"),
                              hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d",
         annotations = c(
           list(list(x = 0.95, y = 0.95, xref = "paper", yref = "paper",
                     text = "<span style='color:#00bc8c'>Most recent session</span> <span style='color:#00bc8c; border:1px solid black;'>&#x25CF;</span><br><span style='color:#3498db'>All other sessions</span> <span style='color:#3498db'>&#x25CF;</span>",
                     showarrow = FALSE, font = list(size = 15), xanchor = "right", yanchor = "top", align = "right"))),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#3498db"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25,
                      range = c(2, 6), tickvals = seq(2, 6, by = 0.5), ticktext = c("2:00", "2:30", "3:00", "3:30", "4:00", "4:30", "5:00", "5:30", "6:00")),
         margin = list(l = 0, r = 0, t = 0, b = 0))

##------##
##--HR--##
##------##

data_plot_swimming_hr <- df_swimming_365 %>% arrange((hr)) %>% mutate(pace = pace/10, distance = distance, time = time / 60, num = row_number())
colors_hr <- ifelse(data_plot_swimming_hr$id == max(data_plot_swimming_hr$id), "#00bc8c", "#3498db")
hr1 <- 138; hr2 <- 150; hr3 <- 162; hr4 <- 174
plot_hr_swimming <- plot_ly(data = data_plot_swimming_hr, x = ~num, y = ~hr, type = "scatter",
                            marker = list(color = ~colors_hr, size = 12.5, line = list(color = "black", width = 1)), mode = "markers",
                            text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "m", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/100m"), "<br>Speed:", paste0(round(df_swimming_365$speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hrmax, 0), "bpm"),
                            hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d",
         annotations = c(
           list(list(x = 0.075, y = 0.95, xref = "paper", yref = "paper",
                     text = "<span style='color:#00bc8c; border:1px solid black;'>&#x25CF;</span> <span style='color:#00bc8c'>Most recent session</span><br><span style='color:#3498db'>&#x25CF;</span> <span style='color:#3498db'>All other sessions</span>",
                     showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left"),
                list(x = 0.025, y = (min(data_plot_swimming_hr$hr)-5+hr1)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 1</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
                list(x = 0.025, y = (hr1+hr2)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 2</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
                list(x = 0.025, y = (hr2+hr3)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 3</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
                list(x = 0.025, y = (hr3+hr4)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 4</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
                list(x = 0.025, y = (hr4+max(data_plot_swimming_hr$hrmax)+5)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 5</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"))),
         shapes = lapply(1:nrow(data_plot_swimming_hr), function(i) {
           list(type = "line",
                x0 = data_plot_swimming_hr$num[i], x1 = data_plot_swimming_hr$num[i],
                y0 = data_plot_swimming_hr$hr[i], y1 = data_plot_swimming_hr$hrmax[i],
                line = list(color = ifelse(i == match(max(data_plot_swimming_hr$id), data_plot_swimming_hr$id),
                                           rgb(col2rgb("#00bc8c")[1]/255,col2rgb("#00bc8c")[2]/255,col2rgb("#00bc8c")[3]/255, 0.25),
                                           rgb(col2rgb("#3498db")[1]/255,col2rgb("#3498db")[2]/255,col2rgb("#3498db")[3]/255, 0.25)), width = 5) )}),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#3498db"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25,
                      range = c(min(data_plot_swimming_hr$hr)-5, max(data_plot_swimming_hr$hrmax)+5), tickvals = c(hr1, hr2, hr3, hr4), ticktext = as.character(c(hr1, hr2, hr3, hr4))),
         margin = list(l = 25, r = 0, t = 0, b = 0))

##------------##
##--MAP-LAST--##
##------------##

df_swimming_sub <- df_swimming %>% filter(id %in% unique(df_swimming_365$id)) %>% filter(id == (df_swimming_365 %>% group_by(id) %>% arrange(date) %>% slice_tail(n = 1) %>% ungroup() %>% filter(date == max(date, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map1_swimming <- leaflet() %>% addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17))
if (sum(df_swimming_sub$geo) > 0) {
  plot_map1_swimming <- leaflet(df_swimming_sub) %>%
    addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
    addPolylines(lng = df_swimming_sub$lng, lat = df_swimming_sub$lat, color = "#3498db", weight = 2.5, opacity = 1.00)
} else {
  plot_map1_swimming <- plot_map1_swimming %>%
    setView(lng = 4.4143406907972675, lat = 51.212214294738565, zoom = 13) %>%
    addPopups(4.4143406907972675, 51.212214294738565, "No data found", options = popupOptions(closeButton = FALSE))
}

##------------##
##--MAP-FAST--##
##------------##

df_swimming_sub <- df_swimming %>% filter(id %in% unique(df_swimming_365$id)) %>% filter(id == (df_swimming_365 %>% group_by(id) %>% arrange(speed) %>% slice_tail(n = 1) %>% ungroup() %>% filter(speed == max(speed, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map2_swimming <- leaflet() %>% addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17))
if (sum(df_swimming_sub$geo) > 0) {
  plot_map2_swimming <- leaflet(df_swimming_sub) %>%
    addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
    addPolylines(lng = df_swimming_sub$lng, lat = df_swimming_sub$lat, color = "#3498db", weight = 2.5, opacity = 1.00)
} else {
  plot_map2_swimming <- plot_map2_swimming %>%
    setView(lng = 4.4143406907972675, lat = 51.212214294738565, zoom = 13) %>%
    addPopups(4.4143406907972675, 51.212214294738565, "No data found", options = popupOptions(closeButton = FALSE))
}

##------------##
##--MAP-LONG--##
##------------##

df_swimming_sub <- df_swimming %>% filter(id %in% unique(df_swimming_365$id))  %>% filter(id == (df_swimming_365 %>% group_by(id) %>% arrange(distance) %>% slice_tail(n = 1) %>% ungroup() %>% filter(distance == max(distance, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map3_swimming <- leaflet() %>% addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17))
if (sum(df_swimming_sub$geo) > 0) {
  plot_map3_swimming <- leaflet(df_swimming_sub) %>%
    addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
    addPolylines(lng = df_swimming_sub$lng, lat = df_swimming_sub$lat, color = "#3498db", weight = 2.5, opacity = 1.00)
} else {
  plot_map3_swimming <- plot_map3_swimming %>%
    setView(lng = 4.4143406907972675, lat = 51.212214294738565, zoom = 13) %>%
    addPopups(4.4143406907972675, 51.212214294738565, "No data found", options = popupOptions(closeButton = FALSE))
}

# Save data
save.image(file = "/Users/emmanueldockx/Dropbox/GitHub/emdockx.github.io/stravawattz/stravawattz.RData")



