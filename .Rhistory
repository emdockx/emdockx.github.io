##------------##
##--MAP-LAST--##
##------------##
# Subset the cycling data
df_cycling_sub_last <- df_cycling %>% filter(id %in% unique(df_cycling_365$id)) %>% filter(id == (df_cycling_365 %>% group_by(id) %>% arrange(date) %>% slice_tail(n = 1) %>% ungroup() %>% filter(date == max(date, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
# Retrieve all weather_cycling_last data
weather_cycling_last <- openmeteo::weather_history(
location = c(round(mean(df_cycling_sub_last$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub_last$lng, na.rm = TRUE), 2)),
start = df_cycling_sub_last$date[1],
end = df_cycling_sub_last$date[1],
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
# Fill in missing data
if(is.na(weather_cycling_last$daily_temperature_2m_max[length(weather_cycling_last$date)])) {
# Keep only non-missing data
weather_cycling_last <- weather_cycling_last[which(!is.na(weather_cycling_last$daily_temperature_2m_max)), ]
# For data that is missing
weather_cycling_last <- rbind(weather_cycling_last,
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub_last$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub_last$lng, na.rm = TRUE), 2)),
start = df_cycling_sub_last$date[1],
end = df_cycling_sub_last$date[1],
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")))} else {NULL}
# Rename variables
weather_cycling_last <- weather_cycling_last %>% select(date, temperature = daily_temperature_2m_max, precipitation = daily_precipitation_sum, windspeed = daily_windspeed_10m_max)
# Plot the map
plot_map1_cycling <- leaflet(df_cycling_sub_last) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 10, maxZoom = 15)) %>%
addPolylines(lng = df_cycling_sub_last$lng, lat = df_cycling_sub_last$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub_last$distance[1]/1000, 1), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub_last$speed[1], 1), " km/h"), position = "topright") %>%
addControl(html = paste0("<b>Temperature:</b> ", round(weather_cycling_last[match(df_cycling_sub_last$date[1], weather_cycling_last$date), 2], 0), "°C<br>", "<b>Windspeed:</b> ", round(weather_cycling_last[match(df_cycling_sub_last$date[1], weather_cycling_last$date), 4], 0), " km/h"), position = "bottomleft")
##------------##
##--MAP-FAST--##
##------------##
# Subset cycling data
df_cycling_sub_fast <- df_cycling %>% filter(id %in% unique(df_cycling_365$id)) %>% filter(id == (df_cycling_365 %>% group_by(id) %>% arrange(speed) %>% slice_tail(n = 1) %>% ungroup() %>% filter(speed == max(speed, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
# Retrieve all weather_cycling_fast data
weather_cycling_fast <- openmeteo::weather_history(
location = c(round(mean(df_cycling_sub_fast$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub_fast$lng, na.rm = TRUE), 2)),
start = df_cycling_sub_fast$date[1],
end = df_cycling_sub_fast$date[1],
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
# Fill in missing data
if(is.na(weather_cycling_fast$daily_temperature_2m_max[length(weather_cycling_fast$date)])) {
# Keep only non-missing data
weather_cycling_fast <- weather_cycling_fast[which(!is.na(weather_cycling_fast$daily_temperature_2m_max)), ]
# For data that is missing
weather_cycling_fast <- rbind(weather_cycling_fast,
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub_fast$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub_fast$lng, na.rm = TRUE), 2)),
start = df_cycling_sub_fast$date[1],
end = df_cycling_sub_fast$date[1],
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")))} else {NULL}
# Rename variables
weather_cycling_fast <- weather_cycling_fast %>% select(date, temperature = daily_temperature_2m_max, precipitation = daily_precipitation_sum, windspeed = daily_windspeed_10m_max)
# Plot the map
plot_map2_cycling <- leaflet(df_cycling_sub_fast) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 10, maxZoom = 15)) %>%
addPolylines(lng = df_cycling_sub_fast$lng, lat = df_cycling_sub_fast$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub_fast$distance[1]/1000, 1), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub_fast$speed[1], 1), " km/h"), position = "topright") %>%
addControl(html = paste0("<b>Temperature:</b> ", round(weather_cycling_fast[match(df_cycling_sub_fast$date[1], weather_cycling_fast$date), 2], 0), "°C<br>", "<b>Windspeed:</b> ", round(weather_cycling_fast[match(df_cycling_sub_fast$date[1], weather_cycling_fast$date), 4], 0), " km/h"), position = "bottomleft")
##------------##
##--MAP-LONG--##
##------------##
# Subset the cycling data
df_cycling_sub_long <- df_cycling %>% filter(id %in% unique(df_cycling_365$id))  %>% filter(id == (df_cycling_365 %>% group_by(id) %>% arrange(distance) %>% slice_tail(n = 1) %>% ungroup() %>% filter(distance == max(distance, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
# Retrieve all weather_cycling_long data
weather_cycling_long <- openmeteo::weather_history(
location = c(round(mean(df_cycling_sub_long$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub_long$lng, na.rm = TRUE), 2)),
start = df_cycling_sub_long$date[1],
end = df_cycling_sub_long$date[1],
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
# Fill in missing data
if(is.na(weather_cycling_long$daily_temperature_2m_max[length(weather_cycling_long$date)])) {
# Keep only non-missing data
weather_cycling_long <- weather_cycling_long[which(!is.na(weather_cycling_long$daily_temperature_2m_max)), ]
# For data that is missing
weather_cycling_long <- rbind(weather_cycling_long,
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub_long$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub_long$lng, na.rm = TRUE), 2)),
start = df_cycling_sub_long$date[1],
end = df_cycling_sub_long$date[1],
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")))} else {NULL}
# Rename variables
weather_cycling_long <- weather_cycling_long %>% select(date, temperature = daily_temperature_2m_max, precipitation = daily_precipitation_sum, windspeed = daily_windspeed_10m_max)
# Plot the map
plot_map3_cycling <- leaflet(df_cycling_sub_long) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 10, maxZoom = 15)) %>%
addPolylines(lng = df_cycling_sub_long$lng, lat = df_cycling_sub_long$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub_long$distance[1]/1000, 1), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub_long$speed[1], 1), " km/h"), position = "topright") %>%
addControl(html = paste0("<b>Temperature:</b> ", round(weather_cycling_long[match(df_cycling_sub_long$date[1], weather_cycling_long$date), 2], 0), "°C<br>", "<b>Windspeed:</b> ", round(weather_cycling_long[match(df_cycling_sub_long$date[1], weather_cycling_long$date), 4], 0), " km/h"), position = "bottomleft")
##------------##
##--MAP-HEAT--##
##------------##
# Subset the data
df_cycling_sub_heat <- df_cycling %>% filter(id %in% unique(df_cycling_365$id))
# Start the leaflet map
plot_map4_cycling <- leaflet(df_cycling_sub_heat) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 0, maxZoom = 15))
# Generate a color palette
color_palette <- colorRampPalette(brewer.pal(9, "Set1"))(length(unique(df_cycling_sub_heat$id)))
# Loop through unique ids and add polylines with different colors
unique_ids <- unique(df_cycling_sub_heat$id)
for(i in 1:length(unique_ids)) {
id_value <- unique_ids[i]
line_data <- df_cycling_sub_heat %>% filter(id == id_value)
# Extract the first value of 'distance' for the given id group
first_date <- format(as.Date(line_data$date[1]), "%A %d-%m-%y")
first_distance <- round(line_data$distance[1]/1000, 1)
first_time <- round(line_data$time[1]/60, 0)
first_speed <- round(line_data$speed[1], 1)
first_hr <- round(line_data$hr[1], 1)
# Use a different color for each line (id)
plot_map4_cycling <- plot_map4_cycling %>%
addPolylines(
lng = line_data$lng, lat = line_data$lat,
color = color_palette[i], weight = 2.5, opacity = 1.00,
highlightOptions = highlightOptions(weight = 10, color = "#f39c12"),
popup = paste0("<h5>", first_date,"</h5>",
"<b>Distance:</b> ", first_distance, " km",
"<br><b>Time:</b> ", first_time, " min",
"<br><b>Avg. Speed:</b> ", first_speed, "km/h",
"<br><b>Avg. HR:</b> ", first_hr, " bpm")
)
}
##-------########-------##
##-------SWIMMING-------##
##-------########-------##
##------------##
##--CALENDAR--##
##------------##
# Generate full year calendar_swimming
year_dates <- data.frame(date = seq.Date(from = as.Date(paste0(format(Sys.Date(), "%Y"), "-01-01")), to = as.Date(paste0(format(Sys.Date(), "%Y"), "-12-31")), by = "day"))
# Add week number and day of week
calendar_swimming <- year_dates |> left_join(df_swimming_365 |> group_by(date) |> summarise(distance = sum(distance, na.rm = TRUE), time = sum(time, na.rm = TRUE)), by = "date") |> mutate(week = isoweek(date), day = wday(date, label = TRUE, abbr = FALSE, week_start = 1))
# Convert missings to zero
calendar_swimming$distance <- ifelse(is.na(calendar_swimming$distance), 0, calendar_swimming$distance)
calendar_swimming$time <- ifelse(is.na(calendar_swimming$time), 0, calendar_swimming$time)
# Find last day of week 52
last_match <- match(52, rev(calendar_swimming$week)); if (!is.na(last_match)) {last_match <- length(calendar_swimming$week) - last_match + 1}
# Add extra days as week = 53
calendar_swimming$week[(last_match+1):nrow(calendar_swimming)] <- 53
# Extract extra days
week_53_rows <- calendar_swimming[calendar_swimming$week == 53, ]
# Get the last row's date from week_53_rows
last_date <- max(week_53_rows$date)
# Determine the weekday of the last date (e.g., Wednesday = 3, Thursday = 4, etc.)
last_day_of_week <- weekdays(last_date)
# Define the missing days based on the last day of the week
days_needed <- NULL
if (last_day_of_week == "Monday") {days_needed <- c("Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Tuesday") {days_needed <- c("Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Wednesday") {days_needed <- c("Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Thursday") {days_needed <- c("Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Friday") {days_needed <- c("Saturday", "Sunday")
} else if (last_day_of_week == "Saturday") {days_needed <- c("Sunday")
}
# If days are needed, create a new dataframe with the extra days
if (length(days_needed) > 0) {
# Determine extra day data
extra_days <- data.frame(date = rep(NA, length(days_needed)), distance = rep(0, length(days_needed)), time = rep(0, length(days_needed)), week = rep(53, length(days_needed)), day = days_needed)
# Append the extra days to the original week_53_rows
calendar_swimming <- rbind(calendar_swimming, extra_days)
}
# Determine first day in week 1
first_day <- calendar_swimming$day[1]
# Define the missing days based on the first day of the year
days_needed <- NULL
if (first_day == "Monday") {NULL
} else if (first_day == "Tuesday") {days_needed <- c("Monday")
} else if (first_day == "Wednesday") {days_needed <- c("Monday", "Tuesday")
} else if (first_day == "Thursday") {days_needed <- c("Monday", "Tuesday", "Wednesday")
} else if (first_day == "Friday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday")
} else if (first_day == "Saturday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
} else if (first_day == "Sunday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
}
# If days are needed, create a new dataframe with the extra days
if (length(days_needed) > 0) {
# Determine extra day data
extra_days <- data.frame(date = rep(NA, length(days_needed)), distance = rep(0, length(days_needed)), time = rep(0, length(days_needed)), week = rep(1, length(days_needed)), day = days_needed)
# Append the extra days to the original week_53_rows
calendar_swimming <- rbind(calendar_swimming, extra_days)
}
# Add row numbers
calendar_swimming <- calendar_swimming |> mutate(num = row_number())
# Shorten day names
calendar_swimming$day <- substr(calendar_swimming$day, 1, 3)
# Fix factor level order
calendar_swimming$day <- factor(calendar_swimming$day, levels = c("Sun", "Sat", "Fri", "Thu", "Wed", "Tue", "Mon"))
# Generate plot
plot_calendar_swimming_d <- plot_ly(data = calendar_swimming, x = ~week, y = ~day, z = ~distance,
type = "heatmap", colors = c("#2d2d2d", "#3498db"),
zmin = 0,
zmax = max(calendar_swimming$distance),
showscale = FALSE,
text = ~ifelse(distance > 0, paste0("<b>",wday(calendar_swimming$date, label = TRUE, abbr = FALSE, week_start = 1), " ", format(as.Date(calendar_swimming$date), "%d/%m/%y"), "</b><br>Distance: ", round(calendar_swimming$distance, 0), " m", "<br>Time: ", round(calendar_swimming$time / 60, 1), " min"), NA),
hoverinfo = 'text',
opacity = 0.97) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor="#2d2d2d",
plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#3498db"),
yaxis = list(tickfont = list(size=10, color="#3498db"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", fixedrange = TRUE, side ="top", gridcolor = "#3498db", gridwidth = 0.25),
xaxis = list(tickfont = list(size=10, color="#3498db"), title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", tickmode = "array", tickvals = seq(1, 53, by = 1), tickangle = -90, ticktext = sprintf("%02d", seq(1, 53, by = 1)), fixedrange = TRUE, gridcolor = "#3498db", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0))
##-------------------##
##--CALENDAR-MONTHLY-##
##-------------------##
# Generate calendar with 12-month blocks
year_months <- data.frame(month = c(1:12),
name = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
# Extract month from dates
df_swimming_365$month <- month(df_swimming_365$date)
# Sum the distance and time per month
calendar_months_swimming <- year_months |> left_join(df_swimming_365 |> group_by(month) |> summarise(distance = sum(distance, na.rm = TRUE)), by = "month")
calendar_months_swimming <- calendar_months_swimming |> left_join(df_swimming_365 |> group_by(month) |> summarise(time = sum(time, na.rm = TRUE)), by = "month")
# Convert missings to zero
calendar_months_swimming$distance <- ifelse(is.na(calendar_months_swimming$distance), 0, calendar_months_swimming$distance)
calendar_months_swimming$time <- ifelse(is.na(calendar_months_swimming$time), 0, calendar_months_swimming$time)
# Shorten month names
calendar_months_swimming$cat <- substr(calendar_months_swimming$name, 1, 3)
# Fix factor level order
calendar_months_swimming$cat <- factor(calendar_months_swimming$cat, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
# Add constant number
calendar_months_swimming$constant <- 1
# Generate plot
plot_calendar_swimming_m <- plot_ly(data = calendar_months_swimming, x = ~month, y = ~constant, z = ~distance,
type = "heatmap", colors = c("#2d2d2d", "#3498db"),
zmin = 0,
zmax = max(calendar_months_swimming$distance),
showscale = FALSE,
text = ~ifelse(distance > 0, paste0("<b>", name, "</b>", "<br>Distance: ", round(calendar_months_swimming$distance, 0), " m", "<br>Time: ", round(calendar_months_swimming$time / 60 / 60, 1), " hours"), NA),
hoverinfo = 'text',
opacity = 0.97) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor="#2d2d2d",
plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#3498db"),
yaxis = list(tickfont = NA, title = NA, visible = FALSE, showticklabels = FALSE, ticks = "", fixedrange = TRUE, side ="top", gridcolor = "#3498db", gridwidth = 0.25),
xaxis = list(tickfont = list(size=10, color="#3498db"), title = NA, visible = TRUE, showticklabels = TRUE, tickcolor = "#2d2d2d", tickmode = "array", tickvals = seq(1, 12, by = 1), tickangle = 0, ticktext = calendar_months_swimming$cat, fixedrange = TRUE, gridcolor = rgb(0,0,0,0), gridwidth = 0),
margin = list(l = 0, r = 0, t = 10, b = 20))
##-----------------------##
##--CUMULATIVE-DISTANCE--##
##-----------------------##
data_plot_swimming_cum_distance <- df_swimming_365 %>% arrange(date) %>% mutate(distance = distance / 1000, time = time / 60, num = row_number())
data_plot_swimming_cum_distance$distance_cumulative <- cumsum(data_plot_swimming_cum_distance$distance)
row0 <- data_plot_swimming_cum_distance[1, ]
row0[] <- NA
row0$distance_cumulative <- 0
row0$num <- 0
row0$date <- as.Date(paste0(substr(data_plot_swimming_cum_distance$date[1], 1, 5), "01-01"))
data_plot_swimming_cum_distance <- rbind(row0, data_plot_swimming_cum_distance)
plot_cum_distance_swimming <- plot_ly(data = data_plot_swimming_cum_distance,
x = ~num,
y = ~distance_cumulative,
type = "scatter",
mode = "lines+markers",
text = ~ifelse(distance_cumulative > 0, paste0("<b>", wday(date, label = TRUE, abbr = FALSE, week_start = 1), " ", format(as.Date(date), "%d/%m/%y"), "</b><br>Distance: ", round(distance_cumulative, 1), " km"), NA),
hoverinfo = 'text', textposition = "none", opacity = 0.97,
fill = "tozeroy",
fillcolor = "rgba(52, 152, 219, 0.25)",
line = list(color = "#3498db", width = 2),
marker = list(color = "#3498db", size = c(0, rep(7, length(data_plot_swimming_cum_distance$id)-1))),
opacity = 0.97) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor = "#2d2d2d", plot_bgcolor = "#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#3498db"),
xaxis = list(zeroline = FALSE, title = NA, visible = TRUE, showticklabels = FALSE, fixedrange = TRUE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(zeroline = FALSE, tickfont = list(size = 10, color = "#3498db"), fixedrange = TRUE, ticksuffix = " km", title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side = "top", gridcolor = "#333", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0))
##-------------------##
##--CUMULATIVE-TIME--##
##-------------------##
data_plot_swimming_cum_time <- df_swimming_365 %>% arrange(date) %>% mutate(distance = distance / 1000, time = time / 60 / 60, num = row_number())
data_plot_swimming_cum_time$time_cumulative <- cumsum(data_plot_swimming_cum_time$time)
row0 <- data_plot_swimming_cum_time[1, ]
row0[] <- NA
row0$time_cumulative <- 0
row0$num <- 0
row0$date <- as.Date(paste0(substr(data_plot_swimming_cum_time$date[1], 1, 5), "01-01"))
data_plot_swimming_cum_time <- rbind(row0, data_plot_swimming_cum_time)
plot_cum_time_swimming <- plot_ly(data = data_plot_swimming_cum_time,
x = ~num,
y = ~time_cumulative,
type = "scatter",
mode = "lines+markers",
text = ~ifelse(time_cumulative > 0, paste0("<b>", wday(date, label = TRUE, abbr = FALSE, week_start = 1), " ", format(as.Date(date), "%d/%m/%y"), "</b><br>Time: ", round(time_cumulative, 1), " hours"), NA),
hoverinfo = 'text', textposition = "none", opacity = 0.97,
fill = "tozeroy",
fillcolor = "rgba(52, 152, 219, 0.25)",
line = list(color = "#3498db", width = 2),
marker = list(color = "#3498db", size = c(0, rep(7, length(data_plot_swimming_cum_time$id)-1))),
opacity = 0.97) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor = "#2d2d2d", plot_bgcolor = "#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#3498db"),
xaxis = list(zeroline = FALSE, title = NA, visible = TRUE, showticklabels = FALSE, fixedrange = TRUE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(zeroline = FALSE, tickfont = list(size = 10, color = "#3498db"), fixedrange = TRUE, ticksuffix = " hr", title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side = "top", gridcolor = "#333", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0))
##------------##
##--DISTANCE--##
##------------##
data_plot_swimming_distance <- df_swimming_365 %>% arrange(distance) %>% mutate(pace = pace/10, distance = distance, time = time / 60, num = row_number(), bar_color = ifelse(date == max(date), "#00bc8c", "#3498db"))
plot_distance_swimming <- plot_ly(data = data_plot_swimming_distance, x = ~num, y = ~distance,
type = "bar",
marker = list(color = ~bar_color, size = 12.5, line = list(color = "black", width = 1)),
text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "m", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/100m"), "<br>Speed:", paste0(round(df_swimming_365$speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hr_max, 0), "bpm"),
hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
add_lines(x = c(min(data_plot_swimming_distance$num)-0.5, max(data_plot_swimming_distance$num)+0.5), y = rep(mean(data_plot_swimming_distance$distance, na.rm = TRUE), 2), line = list(color = "white", width = 0.25, dash = "dot"), showlegend = FALSE, hoverinfo = "skip", inherit = FALSE) |>
layout(annotations = list(list(x = max(data_plot_swimming_distance$num)+0.50, y = mean(data_plot_swimming_distance$distance, na.rm = TRUE), xanchor = "right", yanchor = "bottom", text = paste0("Average: ", round(mean(data_plot_swimming_distance$distance, na.rm = TRUE), 0), " m"), showarrow = FALSE, font = list(color = "white", size = 12)))) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#3498db"),
annotations = list(
list(x = 0.05, y = 0.98, xref = "paper", yref = "paper",
text = "<span style='color:#00bc8c; border:1px solid black;'>&#9632;</span> <span style='color:#00bc8c'>Most recent session</span><br><span style='color:#3498db'>&#9632;</span> <span style='color:#3498db'>All other sessions</span>",
showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left")),
xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", fixedrange = TRUE, gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(tickfont = list(size=10, color="#3498db"), ticksuffix = " m", fixedrange = TRUE, title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0))
##--------##
##--TIME--##
##--------##
data_plot_swimming_time <- df_swimming_365 %>% arrange(time) %>% mutate(pace = pace/10, distance = distance, time = time / 60, num = row_number(), bar_color = ifelse(date == max(date), "#00bc8c", "#3498db"))
plot_time_swimming <- plot_ly(data = data_plot_swimming_time, x = ~num, y = ~time,
type = "bar",
marker = list(color = ~bar_color, size = 12.5, line = list(color = "black", width = 1)),
text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "m", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/100m"), "<br>Speed:", paste0(round(df_swimming_365$speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hr_max, 0), "bpm"),
hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
add_lines(x = c(min(data_plot_swimming_time$num)-0.5, max(data_plot_swimming_time$num)+0.5), y = rep(mean(data_plot_swimming_time$time, na.rm = TRUE), 2), line = list(color = "white", width = 0.25, dash = "dot"), showlegend = FALSE, hoverinfo = "skip", inherit = FALSE) |>
layout(annotations = list(list(x = max(data_plot_swimming_time$num)+0.50, y = mean(data_plot_swimming_time$time, na.rm = TRUE), xanchor = "right", yanchor = "bottom", text = paste0("Average: ", round(mean(data_plot_swimming_time$time, na.rm = TRUE), 0), " min"), showarrow = FALSE, font = list(color = "white", size = 12)))) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#3498db"),
annotations = list(
list(x = 0.05, y = 0.98, xref = "paper", yref = "paper",
text = "<span style='color:#00bc8c; border:1px solid black;'>&#9632;</span> <span style='color:#00bc8c'>Most recent session</span><br><span style='color:#3498db'>&#9632;</span> <span style='color:#3498db'>All other sessions</span>",
showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left")),
xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", fixedrange = TRUE, gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(tickfont = list(size=10, color="#3498db"), ticksuffix = " min", fixedrange = TRUE, title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0))
##--------##
##--PACE--##
##--------##
data_plot_swimming_pace <- df_swimming_365 %>% arrange(desc(pace)) %>% mutate(pace = pace/10, distance = distance, time = time / 60, num = row_number())
colors_pace_swimming <- ifelse(data_plot_swimming_pace$id == max(data_plot_swimming_pace$id), "#00bc8c", "#3498db")
plot_pace_swimming <- plot_ly(data = data_plot_swimming_pace, x = ~num, y = ~pace, type = "scatter",
marker = list(color = ~colors_pace_swimming, size = 12.5, line = list(color = "black", width = 1)), mode = "markers",
text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "m", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/100m"), "<br>Speed:", paste0(round(df_swimming_365$speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hr_max, 0), "bpm"),
hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
add_lines(x = c(min(data_plot_swimming_pace$num)-0.5, max(data_plot_swimming_pace$num)+0.5), y = rep(mean(data_plot_swimming_pace$pace, na.rm = TRUE), 2), line = list(color = "white", width = 0.25, dash = "dot"), showlegend = FALSE, hoverinfo = "skip", inherit = FALSE) |>
layout(annotations = list(list(x = max(data_plot_swimming_pace$num)+0.50, y = mean(data_plot_swimming_pace$pace, na.rm = TRUE), xanchor = "right", yanchor = "bottom", text = paste0("Average: ", paste0(floor(pace <- mean(data_plot_swimming_pace$pace, na.rm = TRUE)), ":", ifelse(round((mean(data_plot_swimming_pace$pace, na.rm = TRUE) %% 1) * 60) < 10, paste0("0", round((mean(data_plot_swimming_pace$pace, na.rm = TRUE) %% 1) * 60)), round((mean(data_plot_swimming_pace$pace, na.rm = TRUE) %% 1) * 60))), "/100m"), showarrow = FALSE, font = list(color = "white", size = 12)))) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#3498db"),
annotations = c(
list(list(x = 0.95, y = 0.98, xref = "paper", yref = "paper",
text = "<span style='color:#00bc8c'>Most recent session</span> <span style='color:#00bc8c; border:1px solid black;'>&#x25CF;</span><br><span style='color:#3498db'>All other sessions</span> <span style='color:#3498db'>&#x25CF;</span>",
showarrow = FALSE, font = list(size = 15), xanchor = "right", yanchor = "top", align = "right"))),
xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", fixedrange = TRUE, gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(tickfont = list(size=10, color="#3498db"), title = NA, fixedrange = TRUE, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25,
range = c(1, 5), tickvals = seq(1, 5, by = 0.5), ticktext = c("1:00 min/100m", "1:30 min/100m", "2:00 min/100m", "2:30 min/100m", "3:00 min/100m", "3:30 min/100m", "4:00 min/100m", "4:30 min/100m", "5:00 min/100m")),
margin = list(l = 0, r = 0, t = 0, b = 0))
##------##
##--HR--##
##------##
data_plot_swimming_hr <- df_swimming_365 %>% arrange((hr)) %>% mutate(pace = pace/10, distance = distance, time = time / 60, num = row_number())
colors_hr_swimming <- ifelse(data_plot_swimming_hr$id == max(data_plot_swimming_hr$id), "#00bc8c", "#3498db")
hr1 <- 138; hr2 <- 150; hr3 <- 162; hr4 <- 174
plot_hr_swimming <- plot_ly(data = data_plot_swimming_hr, x = ~num, y = ~hr, type = "scatter",
marker = list(color = ~colors_hr_swimming, size = 12.5, line = list(color = "black", width = 1)), mode = "markers",
text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", round(distance, 1), "m", "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/100m"), "<br>Speed:", paste0(round(df_swimming_365$speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hr_max, 0), "bpm"),
hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
add_lines(x = c(min(data_plot_swimming_hr$num)-0.5, max(data_plot_swimming_hr$num)+0.5), y = rep(mean(data_plot_swimming_hr$hr, na.rm = TRUE), 2), line = list(color = "white", width = 0.25, dash = "dot"), showlegend = FALSE, hoverinfo = "skip", inherit = FALSE) |>
layout(annotations = list(list(x = max(data_plot_swimming_hr$num)+0.50, y = mean(data_plot_swimming_hr$hr, na.rm = TRUE), xanchor = "right", yanchor = "top", text = paste0("Average: ", round(mean(data_plot_swimming_hr$hr, na.rm = TRUE), 0), " bpm"), showarrow = FALSE, font = list(color = "white", size = 12)))) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#3498db"),
annotations = c(
list(list(x = 0.075, y = 0.98, xref = "paper", yref = "paper",
text = "<span style='color:#00bc8c; border:1px solid black;'>&#x25CF;</span> <span style='color:#00bc8c'>Most recent session</span><br><span style='color:#3498db'>&#x25CF;</span> <span style='color:#3498db'>All other sessions</span>",
showarrow = FALSE, font = list(size = 15), xanchor = "left", yanchor = "top", align = "left"),
list(x = 0.025, y = (min(data_plot_swimming_hr$hr)-5+hr1)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 1</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
list(x = 0.025, y = (hr1+hr2)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 2</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
list(x = 0.025, y = (hr2+hr3)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 3</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
list(x = 0.025, y = (hr3+hr4)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 4</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"),
list(x = 0.025, y = (hr4+max(data_plot_swimming_hr$hr_max)+5)/2-0.5, xref = "paper", yref = "y", text = "<i><span style='color:#424242'>Zone 5</span></i>", showarrow = FALSE, font = list(size = 10), xanchor = "right"))),
shapes = lapply(1:nrow(data_plot_swimming_hr), function(i) {
list(type = "line",
x0 = data_plot_swimming_hr$num[i], x1 = data_plot_swimming_hr$num[i],
y0 = data_plot_swimming_hr$hr[i], y1 = data_plot_swimming_hr$hr_max[i],
line = list(color = ifelse(i == match(max(data_plot_swimming_hr$id), data_plot_swimming_hr$id),
rgb(col2rgb("#00bc8c")[1]/255,col2rgb("#00bc8c")[2]/255,col2rgb("#00bc8c")[3]/255, 0.25),
rgb(col2rgb("#3498db")[1]/255,col2rgb("#3498db")[2]/255,col2rgb("#3498db")[3]/255, 0.25)), width = 5) )}),
xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, fixedrange = TRUE, ticks = "", gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(tickfont = list(size=10, color="#3498db"), title = NA, fixedrange = TRUE, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25,
range = c(min(data_plot_swimming_hr$hr)-5, max(data_plot_swimming_hr$hr_max)+5), tickvals = c(hr1, hr2, hr3, hr4), ticktext = paste0(as.character(c(hr1, hr2, hr3, hr4)), " bpm")),
margin = list(l = 25, r = 0, t = 0, b = 0))
##------------##
##--MAP-LAST--##
##------------##
df_swimming_sub <- df_swimming %>% filter(id %in% unique(df_swimming_365$id)) %>% filter(id == (df_swimming_365 %>% group_by(id) %>% arrange(date) %>% slice_tail(n = 1) %>% ungroup() %>% filter(date == max(date, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map1_swimming <- leaflet() %>% addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17))
if (sum(df_swimming_sub$geo) > 0) {
plot_map1_swimming <- leaflet(df_swimming_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 10, maxZoom = 15)) %>%
addPolylines(lng = df_swimming_sub$lng, lat = df_swimming_sub$lat, color = "#3498db", weight = 2.5, opacity = 1.00)
} else {
plot_map1_swimming <- plot_map1_swimming %>%
setView(lng = 4.4143406907972675, lat = 51.212214294738565, zoom = 13) %>%
addPopups(4.4143406907972675, 51.212214294738565, "No data found", options = popupOptions(closeButton = FALSE))
}
##------------##
##--MAP-FAST--##
##------------##
df_swimming_sub <- df_swimming %>% filter(id %in% unique(df_swimming_365$id)) %>% filter(id == (df_swimming_365 %>% group_by(id) %>% arrange(speed) %>% slice_tail(n = 1) %>% ungroup() %>% filter(speed == max(speed, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map2_swimming <- leaflet() %>% addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17))
if (sum(df_swimming_sub$geo) > 0) {
plot_map2_swimming <- leaflet(df_swimming_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 10, maxZoom = 15)) %>%
addPolylines(lng = df_swimming_sub$lng, lat = df_swimming_sub$lat, color = "#3498db", weight = 2.5, opacity = 1.00)
} else {
plot_map2_swimming <- plot_map2_swimming %>%
setView(lng = 4.4143406907972675, lat = 51.212214294738565, zoom = 13) %>%
addPopups(4.4143406907972675, 51.212214294738565, "No data found", options = popupOptions(closeButton = FALSE))
}
##------------##
##--MAP-LONG--##
##------------##
df_swimming_sub <- df_swimming %>% filter(id %in% unique(df_swimming_365$id))  %>% filter(id == (df_swimming_365 %>% group_by(id) %>% arrange(distance) %>% slice_tail(n = 1) %>% ungroup() %>% filter(distance == max(distance, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map3_swimming <- leaflet() %>% addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17))
if (sum(df_swimming_sub$geo) > 0) {
plot_map3_swimming <- leaflet(df_swimming_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 10, maxZoom = 15)) %>%
addPolylines(lng = df_swimming_sub$lng, lat = df_swimming_sub$lat, color = "#3498db", weight = 2.5, opacity = 1.00)
} else {
plot_map3_swimming <- plot_map3_swimming %>%
setView(lng = 4.4143406907972675, lat = 51.212214294738565, zoom = 13) %>%
addPopups(4.4143406907972675, 51.212214294738565, "No data found", options = popupOptions(closeButton = FALSE))
}
# Clean global environment
suppressWarnings({
rm(df, request, temp, url, i, access_token, saved_id, df_clean,
df_clean_running, df_clean_running_temp, df_clean_running_add,
df_clean_cycling, df_clean_cycling_temp, df_clean_cycling_add,
df_clean_swimming, df_clean_swimming_temp, df_clean_swimming_add,
add, extra_days, line_data, row0, week_53_rows, year_dates, year_months, col, days_needed,
first_date, first_day, first_distance, first_hr, first_pace, first_speed, first_time,
id_value, last_date, last_day_of_week, last_match, missing_cols, unique_ids)
})
##-------#######-------##
##-------DATASET-------##
##-------#######-------##
# Subset dataframes for plotting
overview_running <- df_running_all |> arrange(desc(date)) |> mutate(pace = sprintf("%02d:%02d", floor(pace), round((pace %% 1) * 60)), time = round(time/60,0), date = format(as.Date(date), "%y-%m-%d"), distance = format(round(distance/1000,1),1)) |> select(date, km = distance, pace, hr)
overview_cycling <- df_cycling_all |> arrange(desc(date)) |> mutate(speed = format(round(speed,1),1), time = round(time/60,0), date = format(as.Date(date), "%y-%m-%d"), distance = format(round(distance/1000,1),1)) |> select(date, km = distance, speed, hr)
overview_swimming <- df_swimming_all |> arrange(desc(date)) |> mutate(pace = pace/10, pace = sprintf("%02d:%02d", floor(pace), round((pace %% 1) * 60)), time = round(time/60,0), date = format(as.Date(date), "%y-%m-%d"), distance = format(round(distance,1),1)) |> select(date, meter = distance, pace, hr)
# Running distance
plot_overview_running1 <-
plot_ly(overview_running %>% mutate(km = as.numeric(km)), x = ~date,
y = ~km,
type = 'scatter',
mode = 'markers',
name = "Distance (km)",
marker = list(color = "#54b98f", symbol="circle-dot"),
text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", km, "km"),# "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hr_max, 0), "bpm"),
hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#54b98f"),
xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", fixedrange = TRUE, gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(tickfont = list(size=10, color="#54b98f"), ticksuffix = " km", fixedrange = TRUE, title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0)); plot_overview_running1
# Running pace
plot_overview_running2 <-
plot_ly(overview_running, x = ~date,
y = ~pace,
type = 'scatter',
mode = 'markers',
name = "Distance (km)",
marker = list(color = "#54b98f", symbol="star-triangle-up-dot"),
text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Pace:", pace, "min/km"),# "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hr_max, 0), "bpm"),
hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#54b98f"),
xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", fixedrange = TRUE, gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(tickfont = list(size=10, color="#54b98f"), ticksuffix = "/km", fixedrange = TRUE, title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0)); plot_overview_running2
# Running hr
plot_overview_running3 <-
plot_ly(overview_running, x = ~date,
y = ~hr,
type = 'scatter',
mode = 'markers',
name = "Distance (km)",
marker = list(color = "#54b98f", symbol="star-dot"),
text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>HR:", hr, "bpm"),# "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hr_max, 0), "bpm"),
hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#54b98f"),
xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", fixedrange = TRUE, gridcolor = "transparent", gridwidth = 0.25),
yaxis = list(tickfont = list(size=10, color="#54b98f"), ticksuffix = "bpm", fixedrange = TRUE, title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0)); plot_overview_running3
# Save data
save.image(file = "/Users/emmanueldockx/Dropbox/GitHub/emdockx.github.io/stravawattz.RData")
# Move to repository location
setwd("/Users/emmanueldockx/Dropbox/GitHub/emdockx.github.io")
# Render the Quarto dashboard
quarto::quarto_render("Stravawattz.qmd")
# Initialize Git
system("git init")
# Set file size limit
system("git config http.postBuffer 524288000")
# Add all files
system("git add .")
# Commit changes
system("git commit -m 'publication'")
# Push changes
system("git push")
