print(weather_data$properties$timeseries[1:5, c("time", "data")])
weather_data
# obtain cloud cover history for London over 2020
weather_history("London",
start = "2020-01-01",
end = "2021-12-31",
hourly = "cloudcover"
)
library(openmeteo)
install.packages("openmeteo")
?weather_history
?weather_history
??weather_history
round(mean(df_cycling_sub$lat, na.rm = TRUE), 2)
round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)
c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2))
# obtain cloud cover history for London over 2020
weather_history(c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2020-01-01",
end = "2021-12-31",
hourly = "cloudcover"
)
# obtain cloud cover history for London over 2020
openmeteo::weather_history(c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2020-01-01",
end = "2021-12-31",
hourly = "cloudcover"
)
# obtain cloud cover history for London over 2020
openmeteo::weather_history(c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2020-01-01",
end = "2021-12-31",
daily = "temperature_2m"
)
# obtain cloud cover history for London over 2020
openmeteo::weather_history(c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2020-01-01",
end = "2021-12-31",
daily = "temperature_2m_max"
)
# obtain cloud cover history for London over 2020
openmeteo::weather_history(c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-12",
end = "2025-03-12",
daily = "temperature_2m_max"
)
# obtain cloud cover history for London over 2020
openmeteo::weather_history(c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-11",
end = "2025-03-11",
daily = "temperature_2m_max"
)
# obtain cloud cover history for London over 2020
openmeteo::weather_history(c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-11",
end = "2025-03-11",
hourly = "temperature_2m"
)
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-11",
end = "2025-03-11",
hourly = "temperature_2m"
)
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-12",
end = "2025-03-12",
hourly = "temperature_2m"
)
# obtain cloud cover history for London over 2020
openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-10",
end = "2025-03-10",
hourly = "temperature_2m"
)
# obtain cloud cover history for London over 2020
openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-10",
end = "2025-03-10",
daily = "temperature_2m_max"
)
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-10",
end = "2025-03-10",
daily = "temperature_2m_max"
)
# obtain cloud cover history for London over 2020
openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-12",
end = "2025-03-12",
daily = "temperature_2m_max"
)
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-12",
end = "2025-03-12",
daily = "temperature_2m_max"
)
# obtain cloud cover history for London over 2020
openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-12",
end = "2025-03-12",
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
# obtain cloud cover history for London over 2020
openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-10",
end = "2025-03-10",
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
# For data that is not missing
openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = "2025-03-10",
end = "2025-03-10",
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
df_cycling_all$date
min(df_cycling_all$date)
c(df_running_all$date, df_cycling_all$date, df_swimming_all$date)
min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE)
Sys.Date()
# For data that is not missing
openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE),
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
# For data that is not missing
weather <- openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE),
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
weather$date
min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()
as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date())
weather$date
weather
View(weather)
weather[which(!is.na(weather$daily_temperature_2m_max)), ]
# For data that is not missing
weather <- openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE),
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
# Keep only non-missing data
weather <- weather[which(!is.na(weather$daily_temperature_2m_max)), ]
weather$date
as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date())
setdiff(weather$date, as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()))
weather$date
as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date())
as.Date(weather$date)
as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date())
setdiff()
?setdiff()
setdiff(c(1, 2, 3), 2)
setdiff(as.Date(weather$date), as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()))
setdiff(as.Date(weather$date), seq.Date(from = as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE)),
to = Sys.Date(), by = "day"))
as.Date(weather$date)
str(as.Date(weather$date))
str(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()))
list1 <- as.Date(weather$date))
list2 <- as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()))
list1 <- as.Date(weather$date)
list2 <- as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date())
setdiff(list1, list2)
setdiff(list2, list1)
setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date))
as.Date(setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date)))
as.Date(setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date)))[1]
# For data that is missing
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = as.Date(setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date)))[1],
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
# For data that is missing
weather <- rbind(weather,
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = as.Date(setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date)))[1],
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")))
View(weather)
View(weather)
colnames(weather)
# For data that is missing
weather <- rbind(weather,
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = as.Date(setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date)))[1],
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max"))) %>%
select(date, temperature = daily_temperature_2m_max)
# For data that is not missing
weather <- openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE),
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
# Keep only non-missing data
weather <- weather[which(!is.na(weather$daily_temperature_2m_max)), ]
# For data that is missing
weather <- rbind(weather,
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = as.Date(setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date)))[1],
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max"))) %>%
select(date, temperature = daily_temperature_2m_max)
colnames(weather)
# For data that is not missing
weather <- openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE),
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
# Keep only non-missing data
weather <- weather[which(!is.na(weather$daily_temperature_2m_max)), ]
weather
# For data that is not missing
weather <- openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE),
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
is.na(weather)
table(is.na(weather))
table(is.na(weather))[2]
# Keep only non-missing data
weather <- weather[which(!is.na(weather$daily_temperature_2m_max)), ]
table(is.na(weather))[2]
table(is.na(weather))
is.na(weather)
length(weather)
length(weather$date)
is.na(weather[length(weather$date)])
is.na(weather$daily_temperature_2m_max[length(weather$date)])
is.na(weather$daily_temperature_2m_max[length(weather$date)])
if(is.na(weather$daily_temperature_2m_max[length(weather$date)])) {
# Keep only non-missing data
weather <- weather[which(!is.na(weather$daily_temperature_2m_max)), ]
# For data that is missing
weather <- rbind(weather,
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = as.Date(setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date)))[1],
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")))} else {NULL}
# Fill in missing data
if(is.na(weather$daily_temperature_2m_max[length(weather$date)])) {
# Keep only non-missing data
weather <- weather[which(!is.na(weather$daily_temperature_2m_max)), ]
# For data that is missing
weather <- rbind(weather,
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = as.Date(setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date)))[1],
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")))} else {NULL}
# Fill in missing data
if(is.na(weather$daily_temperature_2m_max[length(weather$date)])) {
# Keep only non-missing data
weather <- weather[which(!is.na(weather$daily_temperature_2m_max)), ]
# For data that is missing
weather <- rbind(weather,
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = as.Date(setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date)))[1],
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")))} else {NULL}
# Rename variables
weather <- weather %>%
select(date,
temperature = daily_temperature_2m_max,
precipitation = precipitation_sum,
windspeed = windspeed_10m_max)
weather
# For data that is not missing
weather <- openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE),
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
# Fill in missing data
if(is.na(weather$daily_temperature_2m_max[length(weather$date)])) {
# Keep only non-missing data
weather <- weather[which(!is.na(weather$daily_temperature_2m_max)), ]
# For data that is missing
weather <- rbind(weather,
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = as.Date(setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date)))[1],
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")))} else {NULL}
# Rename variables
weather <- weather %>%
select(date,
temperature = daily_temperature_2m_max,
precipitation = precipitation_sum,
windspeed = windspeed_10m_max)
# Rename variables
weather <- weather %>%
select(date,
temperature = temperature_2m_max,
precipitation = precipitation_sum,
windspeed = windspeed_10m_max)
# Rename variables
weather <- weather %>%
select(date,
temperature = daily_temperature_2m_max,
precipitation = precipitation_sum,
windspeed = windspeed_10m_max)
colnames(weather)
# For data that is missing
weather <- rbind(weather,
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = as.Date(setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date)))[1],
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")))} else {NULL}
# Rename variables
weather <- weather %>%
select(date,
temperature = daily_temperature_2m_max,
precipitation = daily_precipitation_sum,
windspeed = daily_windspeed_10m_max)
# For data that is not missing
weather <- openmeteo::weather_history(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE),
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")
)
# Fill in missing data
if(is.na(weather$daily_temperature_2m_max[length(weather$date)])) {
# Keep only non-missing data
weather <- weather[which(!is.na(weather$daily_temperature_2m_max)), ]
# For data that is missing
weather <- rbind(weather,
openmeteo::weather_forecast(
location = c(round(mean(df_cycling_sub$lat, na.rm = TRUE), 2), round(mean(df_cycling_sub$lng, na.rm = TRUE), 2)),
start = as.Date(setdiff(as.Date(min(c(df_running_all$date, df_cycling_all$date, df_swimming_all$date), na.rm = TRUE):Sys.Date()), as.Date(weather$date)))[1],
end = Sys.Date(),
daily = c("temperature_2m_max", "precipitation_sum", "windspeed_10m_max")))} else {NULL}
# Rename variables
weather <- weather %>%
select(date,
temperature = daily_temperature_2m_max,
precipitation = daily_precipitation_sum,
windspeed = daily_windspeed_10m_max)
weather
df_cycling_sub <- df_cycling %>% filter(id %in% unique(df_cycling_365$id)) %>% filter(id == (df_cycling_365 %>% group_by(id) %>% arrange(date) %>% slice_tail(n = 1) %>% ungroup() %>% filter(date == max(date, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map1_cycling <- leaflet(df_cycling_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "topright") %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "topright")
plot_map1_cycling
plot_map1_cycling <- leaflet(df_cycling_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "topright") %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "bottomright")
plot_map1_cycling
df_cycling_sub$date[1]
plot_map1_cycling <- leaflet(df_cycling_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "topright") %>%
addControl(html = paste0("", " °C<br>", "", " km/h"), position = "bottomright")
plot_map1_cycling
plot_map1_cycling <- leaflet(df_cycling_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "topright") %>%
addControl(html = paste0("", " °C<br>", "", " km/h"), position = "bottomleft")
plot_map1_cycling
df_cycling_sub$date[1]
weather
?match()
match(df_cycling_sub$date[1], weather$date)
weather[match(df_cycling_sub$date[1], weather$date), 2]
round(weather[match(df_cycling_sub$date[1], weather$date), 2], 0)
plot_map1_cycling <- leaflet(df_cycling_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "topright") %>%
addControl(html = paste0(round(weather[match(df_cycling_sub$date[1], weather$date), 2], 0), " °C<br>", "", " km/h"), position = "bottomleft")
plot_map1_cycling
plot_map1_cycling <- leaflet(df_cycling_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "topright") %>%
addControl(html = paste0(round(weather[match(df_cycling_sub$date[1], weather$date), 2], 0), "°C<br>", "", " km/h"), position = "bottomleft")
plot_map1_cycling
plot_map1_cycling <- leaflet(df_cycling_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "topright") %>%
addControl(html = paste0("Temperature: ", round(weather[match(df_cycling_sub$date[1], weather$date), 2], 0), "°C<br>", "", " km/h"), position = "bottomleft")
plot_map1_cycling
plot_map1_cycling <- leaflet(df_cycling_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "topright") %>%
addControl(html = paste0("<b>Temperature:</b> ", round(weather[match(df_cycling_sub$date[1], weather$date), 2], 0), "°C<br>", "", " km/h"), position = "bottomleft")
plot_map1_cycling
plot_map1_cycling <- leaflet(df_cycling_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "topright") %>%
addControl(html = paste0("<b>Temperature:</b> ", round(weather[match(df_cycling_sub$date[1], weather$date), 2], 0), "°C<br>", "<b>Wind Speed:</b> ", round(weather[match(df_cycling_sub$date[1], weather$date), 4], 0), " km/h"), position = "bottomleft")
plot_map1_cycling
plot_map1_cycling <- leaflet(df_cycling_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "topright") %>%
addControl(html = paste0("<b>Temperature:</b> ", round(weather[match(df_cycling_sub$date[1], weather$date), 2], 0), "°C<br>", "<b>Max. Wind:</b> ", round(weather[match(df_cycling_sub$date[1], weather$date), 4], 0), " km/h"), position = "bottomleft")
df_cycling_sub <- df_cycling %>% filter(id %in% unique(df_cycling_365$id)) %>% filter(id == (df_cycling_365 %>% group_by(id) %>% arrange(speed) %>% slice_tail(n = 1) %>% ungroup() %>% filter(speed == max(speed, na.rm = TRUE)) %>% tail(1) %>% pull(id)))
plot_map2_cycling <- leaflet(df_cycling_sub) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(minZoom = 11, maxZoom = 17)) %>%
addPolylines(lng = df_cycling_sub$lng, lat = df_cycling_sub$lat, color = "#f39c12", weight = 2.5, opacity = 1.00) %>%
addControl(html = paste0("<b>Total Distance:</b> ", round(df_cycling_sub$distance[1]/1000, 2), " km<br>", "<b>Avg. Speed:</b> ", round(df_cycling_sub$speed[1], 2), " km/h"), position = "topright") %>%
addControl(html = paste0("<b>Temperature:</b> ", round(weather[match(df_cycling_sub$date[1], weather$date), 2], 0), "°C<br>", "<b>Max. Wind:</b> ", round(weather[match(df_cycling_sub$date[1], weather$date), 4], 0), " km/h"), position = "bottomleft")
plot_map2_cycling
# Open website
browseURL("https://emdockx.github.io/")
##================================================================
##================================================================
## SECTION 0: Preparation
##================================================================
##================================================================
##########
## TODO ##
##########
# -
# -
# -
# Load packages
library(dplyr)
library(jsonlite)
library(httr)
library(ggplot2)
library(stringr)
library(tidyr)
library(purrr)
library(lubridate)
library(leaflet)
library(DT)
library(plotly)
library(openmeteo)
library(RColorBrewer)
# Prepare global environment
rm(list = ls(all = TRUE))
# Load existing data
load("/Users/emmanueldockx/Dropbox/GitHub/emdockx.github.io/stravawattz.RData")
# Fail-safe function
run_with_retry <- function(script) {
tryCatch(
{ource(script)},
error = function(e) {
message("Error encountered: ", e$message)
message("Retrying once...")
tryCatch(
source(script),  # Try running again
error = function(e2) {
message("Second attempt also failed: ", e2$message)
}
)
}
)
}
# Fail-safe function
run_with_retry <- function(script) {
tryCatch(
{
source(script)  # Try running the script
},
error = function(e) {
message("Error encountered: ", e$message)
message("Retrying once...")
tryCatch(
source(script),  # Try running again
error = function(e2) {
message("Second attempt also failed: ", e2$message)
}
)
}
)
}
# Run the stravawattz script
run_with_retry("stravawattz_script.R")
