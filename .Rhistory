# Hide details
config(displayModeBar = FALSE, staticPlot = FALSE) |>
# centre annotation
layout(
paper_bgcolor="#2d2d2d",
plot_bgcolor="#2d2d2d",
annotations = list(list(
x = 0.5, y = 0.5,
text = paste(title, "\n", value/2.5, "%"),
showarrow = FALSE
)),
margin = list(l = 0, r = 0, b = 0, t = 0),
font = list(color = "white")
)
fig
}
ATL_gauge <- gauge_full("ATL", trimp_daily[match(Sys.Date(), trimp_daily$date), ]$ATL * 2.5)
CTL_gauge <- gauge_full("CTL", trimp_daily[match(Sys.Date(), trimp_daily$date), ]$CTL * 2.5)
ACWR_gauge <- gauge_full("ACWR", trimp_daily[match(Sys.Date(), trimp_daily$date), ]$ACWR * 2.5)
get_training_status <- function(trimp_daily) {
# Extract today's row index
today_idx <- match(Sys.Date(), trimp_daily$date)
# Extract today's ATL, CTL, ACWR
ATL <- trimp_daily$ATL[today_idx]
CTL <- trimp_daily$CTL[today_idx]
ACWR <- trimp_daily$ACWR[today_idx]
# Define status based on conditions
status <- ifelse(ATL > 95 & ACWR > 85 & CTL < ATL, "Risk",
ifelse(ATL > 95 & CTL >= 65 & CTL <= 85 & ACWR > 75 & ACWR <= 85, "High",
ifelse(ATL > 80 & ATL <= 95 & CTL >= 60 & CTL <= 80 & ACWR > 60 & ACWR <= 75, "Optimal",
ifelse(ATL >= 55 & ATL <= 80 & CTL >= 55 & CTL <= 80 & ACWR >= 45 & ACWR <= 60, "Light",
ifelse(ATL < 55 & CTL < 55 & ACWR < 45, "Recovery",
ifelse(ATL < CTL & ACWR < 45, "Recovery",
# Catch-all fallback for any other cases
ifelse(ACWR < 45, "Recovery",
ifelse(ACWR <= 60, "Light",
ifelse(ACWR <= 75, "Optimal",
ifelse(ACWR <= 85, "High", "Risk"))))))))))
return(status)
}
# Assuming you have the function get_training_status and trimp_daily loaded
status_today <- get_training_status(trimp_daily)
# Save data
save.image(file = "/Users/emmanueldockx/Dropbox/GitHub/emdockx.github.io/stravawattz.RData")
##================================================================
##================================================================
## SECTION 4: Push to GitHub
##================================================================
##================================================================
# Move to repository location
setwd("/Users/emmanueldockx/Dropbox/GitHub/emdockx.github.io")
# Render the Quarto dashboard
quarto::quarto_render("Stravawattz.qmd")
# Initialize Git
system("git init")
# Set git
#system("git remote add origin https://github.com/emdockx/emdockx.github.io.git")
# Set file size limit
system("git config http.postBuffer 524288000")
# Add all files
system("git add .")
# Commit changes
system("git commit -m 'publication'")
# Push changes
system("git push")
#### Calendar for 365
{# Generate full year calendar_running
year_dates <- data.frame(date = seq.Date(from = as.Date(Sys.Date()-365), to = as.Date(Sys.Date), by = "day"))# %>% mutate(type = NA)
# Aggregate data for each sport
calendar_running <- year_dates |> left_join(df_running_365 |> mutate(type = "R") |> group_by(date) |> summarise(distance_running = sum(distance, na.rm = TRUE), time_running = sum(time, na.rm = TRUE)), by = "date") |> mutate(week = isoweek(date), day = wday(date, label = TRUE, abbr = FALSE, week_start = 1))
calendar_cycling <- year_dates |> left_join(df_cycling_365 |> mutate(type = "C")  |> group_by(date) |> summarise(distance_cycling = sum(distance, na.rm = TRUE), time_cycling = sum(time, na.rm = TRUE)), by = "date") |> mutate(week = isoweek(date), day = wday(date, label = TRUE, abbr = FALSE, week_start = 1))
calendar_swimming <- year_dates |> left_join(df_swimming_365 |> mutate(type = "S")  |> group_by(date) |> summarise(distance_swimming = sum(distance, na.rm = TRUE), time_swimming = sum(time, na.rm = TRUE)), by = "date") |> mutate(week = isoweek(date), day = wday(date, label = TRUE, abbr = FALSE, week_start = 1))
# Merge sports
calendar_frontpage_365 <- calendar_running |> left_join(calendar_cycling) |> left_join(calendar_swimming) %>% select(date, day, week, everything())
# Determine sport type of day
calendar_frontpage_365$type <- ifelse(!is.na(calendar_frontpage_365$distance_running), "R", ifelse(!is.na(calendar_frontpage_365$distance_cycling), "C", ifelse(!is.na(calendar_frontpage_365$distance_swimming), "S", NA)))
# Convert missings to zero
calendar_frontpage_365$distance_running <- ifelse(is.na(calendar_frontpage_365$distance_running), 0, calendar_frontpage_365$distance_running)
calendar_frontpage_365$time_running <- ifelse(is.na(calendar_frontpage_365$time_running), 0, calendar_frontpage_365$time_running)
calendar_frontpage_365$distance_cycling <- ifelse(is.na(calendar_frontpage_365$distance_cycling), 0, calendar_frontpage_365$distance_cycling)
calendar_frontpage_365$time_cycling <- ifelse(is.na(calendar_frontpage_365$time_cycling), 0, calendar_frontpage_365$time_cycling)
calendar_frontpage_365$distance_swimming <- ifelse(is.na(calendar_frontpage_365$distance_swimming), 0, calendar_frontpage_365$distance_swimming)
calendar_frontpage_365$time_swimming <- ifelse(is.na(calendar_frontpage_365$time_swimming), 0, calendar_frontpage_365$time_swimming)
calendar_frontpage_365$type <- ifelse(is.na(calendar_frontpage_365$type), "Z", calendar_frontpage_365$type)
# Merge distance and time columns
calendar_frontpage_365$distance <- calendar_frontpage_365$distance_running + calendar_frontpage_365$distance_cycling + calendar_frontpage_365$distance_swimming
calendar_frontpage_365$time <- calendar_frontpage_365$time_running + calendar_frontpage_365$time_cycling + calendar_frontpage_365$time_swimming
# Select columns
calendar_frontpage_365 <- calendar_frontpage_365 %>% select(date, day, week, type, distance, time)
# Find last day of week 52
last_match <- match(52, rev(calendar_frontpage_365$week)); if (!is.na(last_match)) {last_match <- length(calendar_frontpage_365$week) - last_match + 1}
if(last_match == 365) {NULL} else {
# Add extra days as week = 53
calendar_frontpage_365$week[(last_match+1):nrow(calendar_frontpage_365)] <- 53
# Extract extra days
week_53_rows <- calendar_frontpage_365[calendar_frontpage_365$week == 53, ]
# Get the last row's date from week_53_rows
last_date <- max(week_53_rows$date)
# Determine the weekday of the last date (e.g., Wednesday = 3, Thursday = 4, etc.)
last_day_of_week <- weekdays(last_date)
# Define the missing days based on the last day of the week
days_needed <- NULL
if (last_day_of_week == "Monday") {days_needed <- c("Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Tuesday") {days_needed <- c("Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Wednesday") {days_needed <- c("Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Thursday") {days_needed <- c("Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Friday") {days_needed <- c("Saturday", "Sunday")
} else if (last_day_of_week == "Saturday") {days_needed <- c("Sunday")
}
# If days are needed, create a new dataframe with the extra days
if (length(days_needed) > 0) {
# Determine extra day data
extra_days <- data.frame(date = rep(NA, length(days_needed)), type = rep(NA, length(days_needed)), distance = rep(0, length(days_needed)), time = rep(0, length(days_needed)), week = rep(53, length(days_needed)), day = days_needed)
# Append the extra days to the original week_53_rows
calendar_frontpage_365 <- rbind(calendar_frontpage_365, extra_days)
}}
# Determine first day in week 1
first_day <- calendar_frontpage_365$day[1]
if(first_day == "Monday") {NULL} else {
# Define the missing days based on the first day of the year
days_needed <- NULL
if (first_day == "Monday") {NULL
} else if (first_day == "Tuesday") {days_needed <- c("Monday")
} else if (first_day == "Wednesday") {days_needed <- c("Monday", "Tuesday")
} else if (first_day == "Thursday") {days_needed <- c("Monday", "Tuesday", "Wednesday")
} else if (first_day == "Friday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday")
} else if (first_day == "Saturday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
} else if (first_day == "Sunday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
}
# If days are needed, create a new dataframe with the extra days
if (length(days_needed) > 0) {
# Determine extra day data
extra_days <- data.frame(date = rep(NA, length(days_needed)), type = rep(NA, length(days_needed)), distance = rep(0, length(days_needed)), time = rep(0, length(days_needed)), week = rep(1, length(days_needed)), day = days_needed)
# Append the extra days to the original week_53_rows
calendar_frontpage_365 <- rbind(calendar_frontpage_365, extra_days)
}}
# Add row numbers
calendar_frontpage_365 <- calendar_frontpage_365 |> mutate(num = row_number())
# Shorten day names
calendar_frontpage_365$day <- substr(calendar_frontpage_365$day, 1, 3)
# Fix factor level order
calendar_frontpage_365$day <- factor(calendar_frontpage_365$day, levels = c("Sun", "Sat", "Fri", "Thu", "Wed", "Tue", "Mon"))
# Recode sport type
calendar_frontpage_365$type <- ifelse(calendar_frontpage_365$type == "R", "Running",
ifelse(calendar_frontpage_365$type == "C", "Cycling",
ifelse(calendar_frontpage_365$type == "S", "Swimming", "Rest day")))
# Determine sport day
calendar_frontpage_365$active <- ifelse(calendar_frontpage_365$type == "Running", 1,
ifelse(calendar_frontpage_365$type == "Cycling", 2,
ifelse(calendar_frontpage_365$type == "Swimming", 3,
0)))
# Fill in missings
calendar_frontpage_365$type <- ifelse(is.na(calendar_frontpage_365$type), "Rest day", calendar_frontpage_365$type)
calendar_frontpage_365$active <- ifelse(is.na(calendar_frontpage_365$active), 0, calendar_frontpage_365$active)
# Determine color palette
colors_frontpage_365 <- c("#2d2d2d")
if("Running" %in% names(table(calendar_frontpage_365$type))) {colors_frontpage_365 <- c(colors_frontpage_365, "#00bc8c")} else {NULL}
if("Swimming" %in% names(table(calendar_frontpage_365$type))) {colors_frontpage_365 <- c(colors_frontpage_365, "#f39c12")} else {NULL}
if("Cycling" %in% names(table(calendar_frontpage_365$type))) {colors_frontpage_365 <- c(colors_frontpage_365, "#3498db")} else {NULL}
# Generate plot
plot_calendar_frontpage_365 <- plot_ly(data = calendar_frontpage_365, x = ~week, y = ~day, z = ~active,
type = "heatmap", colors = colors_frontpage_365,
zmin = 0,
zmax = max(calendar_frontpage_365$active),
showscale = FALSE,
text = ~ifelse(active != 0, paste0("<b>", calendar_frontpage_365$type, "</b><br>", wday(calendar_frontpage_365$date, label = TRUE, abbr = FALSE, week_start = 1), " ", format(as.Date(calendar_frontpage_365$date), "%d/%m/%y"), "<br>Distance: ", round(calendar_frontpage_365$distance/1000, 1), " km", "<br>Time: ", round(calendar_frontpage_365$time / 60, 1), " min"), NA),
hoverinfo = 'text',
opacity = 0.97) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor="#2d2d2d",
plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "grey"),
yaxis = list(tickfont = list(size=10, color="grey"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", fixedrange = TRUE, side ="top", gridcolor = "#00bc8c", gridwidth = 0.25),
xaxis = list(tickfont = list(size=10, color="grey"), title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", tickmode = "array", tickvals = seq(1, 53, by = 1), tickangle = -90, ticktext = sprintf("%02d", seq(1, 53, by = 1)), fixedrange = TRUE, gridcolor = "#00bc8c", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0)); plot_calendar_frontpage_365
}
#### Calendar for 365
# Generate full year calendar_running
year_dates <- data.frame(date = seq.Date(from = as.Date(Sys.Date()-365), to = as.Date(Sys.Date), by = "day"))# %>% mutate(type = NA)
Sys.Date()-365
#### Calendar for 365
# Generate full year calendar_running
year_dates <- data.frame(date = seq.Date(from = as.Date(Sys.Date()-365), to = as.Date(Sys.Date()), by = "day"))# %>% mutate(type = NA)
# Aggregate data for each sport
calendar_running <- year_dates |> left_join(df_running_365 |> mutate(type = "R") |> group_by(date) |> summarise(distance_running = sum(distance, na.rm = TRUE), time_running = sum(time, na.rm = TRUE)), by = "date") |> mutate(week = isoweek(date), day = wday(date, label = TRUE, abbr = FALSE, week_start = 1))
calendar_cycling <- year_dates |> left_join(df_cycling_365 |> mutate(type = "C")  |> group_by(date) |> summarise(distance_cycling = sum(distance, na.rm = TRUE), time_cycling = sum(time, na.rm = TRUE)), by = "date") |> mutate(week = isoweek(date), day = wday(date, label = TRUE, abbr = FALSE, week_start = 1))
calendar_swimming <- year_dates |> left_join(df_swimming_365 |> mutate(type = "S")  |> group_by(date) |> summarise(distance_swimming = sum(distance, na.rm = TRUE), time_swimming = sum(time, na.rm = TRUE)), by = "date") |> mutate(week = isoweek(date), day = wday(date, label = TRUE, abbr = FALSE, week_start = 1))
# Merge sports
calendar_frontpage_365 <- calendar_running |> left_join(calendar_cycling) |> left_join(calendar_swimming) %>% select(date, day, week, everything())
# Determine sport type of day
calendar_frontpage_365$type <- ifelse(!is.na(calendar_frontpage_365$distance_running), "R", ifelse(!is.na(calendar_frontpage_365$distance_cycling), "C", ifelse(!is.na(calendar_frontpage_365$distance_swimming), "S", NA)))
# Convert missings to zero
calendar_frontpage_365$distance_running <- ifelse(is.na(calendar_frontpage_365$distance_running), 0, calendar_frontpage_365$distance_running)
calendar_frontpage_365$time_running <- ifelse(is.na(calendar_frontpage_365$time_running), 0, calendar_frontpage_365$time_running)
calendar_frontpage_365$distance_cycling <- ifelse(is.na(calendar_frontpage_365$distance_cycling), 0, calendar_frontpage_365$distance_cycling)
calendar_frontpage_365$time_cycling <- ifelse(is.na(calendar_frontpage_365$time_cycling), 0, calendar_frontpage_365$time_cycling)
calendar_frontpage_365$distance_swimming <- ifelse(is.na(calendar_frontpage_365$distance_swimming), 0, calendar_frontpage_365$distance_swimming)
calendar_frontpage_365$time_swimming <- ifelse(is.na(calendar_frontpage_365$time_swimming), 0, calendar_frontpage_365$time_swimming)
calendar_frontpage_365$type <- ifelse(is.na(calendar_frontpage_365$type), "Z", calendar_frontpage_365$type)
# Merge distance and time columns
calendar_frontpage_365$distance <- calendar_frontpage_365$distance_running + calendar_frontpage_365$distance_cycling + calendar_frontpage_365$distance_swimming
calendar_frontpage_365$time <- calendar_frontpage_365$time_running + calendar_frontpage_365$time_cycling + calendar_frontpage_365$time_swimming
# Select columns
calendar_frontpage_365 <- calendar_frontpage_365 %>% select(date, day, week, type, distance, time)
# Find last day of week 52
last_match <- match(52, rev(calendar_frontpage_365$week)); if (!is.na(last_match)) {last_match <- length(calendar_frontpage_365$week) - last_match + 1}
if(last_match == 365) {NULL} else {
# Add extra days as week = 53
calendar_frontpage_365$week[(last_match+1):nrow(calendar_frontpage_365)] <- 53
# Extract extra days
week_53_rows <- calendar_frontpage_365[calendar_frontpage_365$week == 53, ]
# Get the last row's date from week_53_rows
last_date <- max(week_53_rows$date)
# Determine the weekday of the last date (e.g., Wednesday = 3, Thursday = 4, etc.)
last_day_of_week <- weekdays(last_date)
# Define the missing days based on the last day of the week
days_needed <- NULL
if (last_day_of_week == "Monday") {days_needed <- c("Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Tuesday") {days_needed <- c("Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Wednesday") {days_needed <- c("Thursday", "Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Thursday") {days_needed <- c("Friday", "Saturday", "Sunday")
} else if (last_day_of_week == "Friday") {days_needed <- c("Saturday", "Sunday")
} else if (last_day_of_week == "Saturday") {days_needed <- c("Sunday")
}
# If days are needed, create a new dataframe with the extra days
if (length(days_needed) > 0) {
# Determine extra day data
extra_days <- data.frame(date = rep(NA, length(days_needed)), type = rep(NA, length(days_needed)), distance = rep(0, length(days_needed)), time = rep(0, length(days_needed)), week = rep(53, length(days_needed)), day = days_needed)
# Append the extra days to the original week_53_rows
calendar_frontpage_365 <- rbind(calendar_frontpage_365, extra_days)
}}
# Determine first day in week 1
first_day <- calendar_frontpage_365$day[1]
if(first_day == "Monday") {NULL} else {
# Define the missing days based on the first day of the year
days_needed <- NULL
if (first_day == "Monday") {NULL
} else if (first_day == "Tuesday") {days_needed <- c("Monday")
} else if (first_day == "Wednesday") {days_needed <- c("Monday", "Tuesday")
} else if (first_day == "Thursday") {days_needed <- c("Monday", "Tuesday", "Wednesday")
} else if (first_day == "Friday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday")
} else if (first_day == "Saturday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
} else if (first_day == "Sunday") {days_needed <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
}
# If days are needed, create a new dataframe with the extra days
if (length(days_needed) > 0) {
# Determine extra day data
extra_days <- data.frame(date = rep(NA, length(days_needed)), type = rep(NA, length(days_needed)), distance = rep(0, length(days_needed)), time = rep(0, length(days_needed)), week = rep(1, length(days_needed)), day = days_needed)
# Append the extra days to the original week_53_rows
calendar_frontpage_365 <- rbind(calendar_frontpage_365, extra_days)
}}
# Add row numbers
calendar_frontpage_365 <- calendar_frontpage_365 |> mutate(num = row_number())
# Shorten day names
calendar_frontpage_365$day <- substr(calendar_frontpage_365$day, 1, 3)
# Fix factor level order
calendar_frontpage_365$day <- factor(calendar_frontpage_365$day, levels = c("Sun", "Sat", "Fri", "Thu", "Wed", "Tue", "Mon"))
# Recode sport type
calendar_frontpage_365$type <- ifelse(calendar_frontpage_365$type == "R", "Running",
ifelse(calendar_frontpage_365$type == "C", "Cycling",
ifelse(calendar_frontpage_365$type == "S", "Swimming", "Rest day")))
# Determine sport day
calendar_frontpage_365$active <- ifelse(calendar_frontpage_365$type == "Running", 1,
ifelse(calendar_frontpage_365$type == "Cycling", 2,
ifelse(calendar_frontpage_365$type == "Swimming", 3,
0)))
# Fill in missings
calendar_frontpage_365$type <- ifelse(is.na(calendar_frontpage_365$type), "Rest day", calendar_frontpage_365$type)
calendar_frontpage_365$active <- ifelse(is.na(calendar_frontpage_365$active), 0, calendar_frontpage_365$active)
# Determine color palette
colors_frontpage_365 <- c("#2d2d2d")
if("Running" %in% names(table(calendar_frontpage_365$type))) {colors_frontpage_365 <- c(colors_frontpage_365, "#00bc8c")} else {NULL}
if("Swimming" %in% names(table(calendar_frontpage_365$type))) {colors_frontpage_365 <- c(colors_frontpage_365, "#f39c12")} else {NULL}
if("Cycling" %in% names(table(calendar_frontpage_365$type))) {colors_frontpage_365 <- c(colors_frontpage_365, "#3498db")} else {NULL}
# Generate plot
plot_calendar_frontpage_365 <- plot_ly(data = calendar_frontpage_365, x = ~week, y = ~day, z = ~active,
type = "heatmap", colors = colors_frontpage_365,
zmin = 0,
zmax = max(calendar_frontpage_365$active),
showscale = FALSE,
text = ~ifelse(active != 0, paste0("<b>", calendar_frontpage_365$type, "</b><br>", wday(calendar_frontpage_365$date, label = TRUE, abbr = FALSE, week_start = 1), " ", format(as.Date(calendar_frontpage_365$date), "%d/%m/%y"), "<br>Distance: ", round(calendar_frontpage_365$distance/1000, 1), " km", "<br>Time: ", round(calendar_frontpage_365$time / 60, 1), " min"), NA),
hoverinfo = 'text',
opacity = 0.97) |>
config(displayModeBar = FALSE, staticPlot = FALSE) |>
layout(paper_bgcolor="#2d2d2d",
plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "grey"),
yaxis = list(tickfont = list(size=10, color="grey"), title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", fixedrange = TRUE, side ="top", gridcolor = "#00bc8c", gridwidth = 0.25),
xaxis = list(tickfont = list(size=10, color="grey"), title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", tickmode = "array", tickvals = seq(1, 53, by = 1), tickangle = -90, ticktext = sprintf("%02d", seq(1, 53, by = 1)), fixedrange = TRUE, gridcolor = "#00bc8c", gridwidth = 0.25),
margin = list(l = 0, r = 0, t = 0, b = 0)); plot_calendar_frontpage_365
calendar_frontpage_365
View(plot_calendar_frontpage_365)
View(calendar_frontpage_365)
plot_calendar_frontpage_365
colors_frontpage_365
calendar_frontpage_365$type
# Generate plot
plot_training_load <- trimp_daily %>%                     # your data frame
#filter(date >= as.Date("2025-01-01") & date <= as.Date(Sys.Date()+42)) %>%
plot_ly(x = ~date) |>
# Trimp line  ── black, width 2 ≈ size 1 in ggplot
add_bars(data = trimp_bars,
x = ~date,
y = ~TRIMP,
color = ~type,
name = ~type,
yaxis = "y2",
width = 86400000 * 1,
showlegend = TRUE,
customdata   = ~toupper(gsub(" TRIMP", "", type)),
hovertemplate = "<b>%{customdata}</b><br>%{x|%A}<br>%{x|%m/%d/%Y}<br>TRIMP: %{y}<extra></extra>") |>
# ATL line  ── black, width 2 ≈ size 1 in ggplot
add_lines(y = ~ATL/100,
name = "ATL (7-day)",
line = list(color = rgb(1, 1, 1, 0.50), width = 1, dash = "dot"),
hovertemplate = "<b>%{x|%A}<br>%{x|%m/%d/%Y}</b><br>ATL: %{y:.0%}<extra></extra>") |>
# CTL line  ── grey, width 2 ≈ size 1 in ggplot
add_lines(y = ~CTL/100,
name = "CTL (42-day)",
line = list(color = "#eb4034",  width = 4),
hovertemplate = "<b>%{x|%A}<br>%{x|%m/%d/%Y}</b><br>CTL: %{y:.0%}<extra></extra>") |>
# Hide details
config(displayModeBar = FALSE, staticPlot = FALSE) |>
# centre annotation
layout(
paper_bgcolor="#2d2d2d",
plot_bgcolor="#2d2d2d",
xaxis = list(zeroline = FALSE, fixedrange = TRUE, tickformat = "%b", tickvals = seq(as.Date("2025-01-01"), as.Date("2025-12-15"), by = "month"), ticktext = format(seq(as.Date("2025-01-01"), as.Date("2025-12-15"), by = "month"), "%b"), color = "white", title = NA, gridcolor = "#333", gridwidth = 0.25),
yaxis  = list(zeroline = FALSE, fixedrange = TRUE, color = "white", title = NA, gridcolor = "#333", gridwidth = 0.25, tickformat = ".0%"),
yaxis2 = list(zeroline = FALSE, fixedrange = TRUE, color = "white", title = NA, gridcolor = "#333", gridwidth = 0.25, overlaying = "y", side = "right", range = c(0, 2 * max(trimp_daily$TRIMP, na.rm = TRUE))),
barmode = 'overlay',
legend = list(orientation = "v", x = 0.05, y = 1, font = list(color = "white")),
margin = list(l = 0, r = 30, t = 0, b = 0)
); plot_training_load
library(scales)
# Row-bind the dataframes
df_together <- rbind(df_running_all[, Reduce(intersect, list(colnames(df_running_all), colnames(df_cycling_all), colnames(df_swimming_all)))],
df_cycling_all[, Reduce(intersect, list(colnames(df_running_all), colnames(df_cycling_all), colnames(df_swimming_all)))],
df_swimming_all[, Reduce(intersect, list(colnames(df_running_all), colnames(df_cycling_all), colnames(df_swimming_all)))]) %>%
arrange(date) %>%
select(id, date, type, calories, distance, time, hr, hr_max, speed, speed_max)
# Define health values
personal_max_hr <- 188
personal_rest_hr <- 64
# Calculate TRIMP
df_together$duration <- df_together$time / 60
df_together$hr_percentage <- (df_together$hr - personal_rest_hr) / (personal_max_hr - personal_rest_hr)
df_together$TRIMP <- df_together$duration * df_together$hr_percentage * 0.64 * exp(1.92 * df_together$hr_percentage)
# Aggregate daily TRIMP scores
trimp_daily <- df_together %>% mutate(date = as.Date(date)) %>% group_by(date) %>% reframe(type = type, TRIMP = sum(TRIMP, na.rm = TRUE)) %>% arrange(date)
# Generate list of all days in the current year
all_dates <- data.frame(date = seq(min(trimp_daily$date), as.Date(paste0(substr(Sys.Date(), 1, 4), "-12-31")), by = "1 day"))
# Add TRIMP scores to the list
trimp_daily <- all_dates %>%
left_join(trimp_daily, by = "date") %>%
mutate(TRIMP = ifelse(is.na(TRIMP), 0, TRIMP))
# Initialize columns
trimp_daily$ATL <- NA
trimp_daily$CTL <- NA
# Initial values
trimp_daily$ATL[1] <- trimp_daily$TRIMP[1]
trimp_daily$CTL[1] <- trimp_daily$TRIMP[1]
# Define decay constants
kATL <- exp(-1/7)
kCTL <- exp(-1/42)
# Calculate moving averages
for (i in 2:nrow(trimp_daily)) {
trimp_daily$ATL[i] <- trimp_daily$TRIMP[i] + kATL * (trimp_daily$ATL[i-1] - trimp_daily$TRIMP[i])
trimp_daily$CTL[i] <- trimp_daily$TRIMP[i] + kCTL * (trimp_daily$CTL[i-1] - trimp_daily$TRIMP[i])
}
# Standardize scores
trimp_daily$ATL <- round(trimp_daily$ATL / max(trimp_daily$ATL, na.rm = TRUE) * 100, 0)
trimp_daily$CTL <- round(trimp_daily$CTL / max(trimp_daily$CTL, na.rm = TRUE) * 100, 0)
# Calculate Workload Ratio (ACWR) scores
trimp_daily$ACWR <- round(1 / (1 + exp(-5 * ((trimp_daily$ATL / trimp_daily$CTL) - 1))) * 100, 0)
# Round TRIMP values
trimp_daily$TRIMP <- round(trimp_daily$TRIMP, 0)
# Define colors
colors <- c("Swim" = "#3498db", "Ride" = "#f39c12", "Run" = "#54b98f")
# Separate data for TRIMP bars
trimp_daily$type <- ifelse(trimp_daily$date > as.Date(Sys.Date()), "Run", trimp_daily$type)
trimp_bars <- trimp_daily %>% filter(!is.na(type)) #%>% filter(date >= as.Date("2025-01-01") & date <= as.Date(Sys.Date()+42))
trimp_bars$type <- paste0(trimp_bars$type, " TRIMP")
if(min(trimp_bars$date, na.rm = TRUE) == "2025-01-01") {NULL} else {trimp_bars <- add_row(trimp_bars, date = as.Date("2025-01-01"), type = "Run TRIMP", TRIMP = 0, ATL = trimp_daily[which(trimp_daily$date == "2025-01-01"),]$ATL, CTL = trimp_daily[which(trimp_daily$date == "2025-01-01"),]$ATL, ACWR = trimp_daily[which(trimp_daily$date == "2025-01-01"),]$ACWR)}
trimp_bars <- trimp_bars %>% arrange(date)
# Generate plot
plot_training_load <- trimp_daily %>%                     # your data frame
#filter(date >= as.Date("2025-01-01") & date <= as.Date(Sys.Date()+42)) %>%
plot_ly(x = ~date) |>
# Trimp line  ── black, width 2 ≈ size 1 in ggplot
add_bars(data = trimp_bars,
x = ~date,
y = ~TRIMP,
color = ~type,
name = ~type,
yaxis = "y2",
width = 86400000 * 1,
showlegend = TRUE,
customdata   = ~toupper(gsub(" TRIMP", "", type)),
hovertemplate = "<b>%{customdata}</b><br>%{x|%A}<br>%{x|%m/%d/%Y}<br>TRIMP: %{y}<extra></extra>") |>
# ATL line  ── black, width 2 ≈ size 1 in ggplot
add_lines(y = ~ATL/100,
name = "ATL (7-day)",
line = list(color = rgb(1, 1, 1, 0.50), width = 1, dash = "dot"),
hovertemplate = "<b>%{x|%A}<br>%{x|%m/%d/%Y}</b><br>ATL: %{y:.0%}<extra></extra>") |>
# CTL line  ── grey, width 2 ≈ size 1 in ggplot
add_lines(y = ~CTL/100,
name = "CTL (42-day)",
line = list(color = "#eb4034",  width = 4),
hovertemplate = "<b>%{x|%A}<br>%{x|%m/%d/%Y}</b><br>CTL: %{y:.0%}<extra></extra>") |>
# Hide details
config(displayModeBar = FALSE, staticPlot = FALSE) |>
# centre annotation
layout(
paper_bgcolor="#2d2d2d",
plot_bgcolor="#2d2d2d",
xaxis = list(zeroline = FALSE, fixedrange = TRUE, tickformat = "%b", tickvals = seq(as.Date("2025-01-01"), as.Date("2025-12-15"), by = "month"), ticktext = format(seq(as.Date("2025-01-01"), as.Date("2025-12-15"), by = "month"), "%b"), color = "white", title = NA, gridcolor = "#333", gridwidth = 0.25),
yaxis  = list(zeroline = FALSE, fixedrange = TRUE, color = "white", title = NA, gridcolor = "#333", gridwidth = 0.25, tickformat = ".0%"),
yaxis2 = list(zeroline = FALSE, fixedrange = TRUE, color = "white", title = NA, gridcolor = "#333", gridwidth = 0.25, overlaying = "y", side = "right", range = c(0, 2 * max(trimp_daily$TRIMP, na.rm = TRUE))),
barmode = 'overlay',
legend = list(orientation = "v", x = 0.05, y = 1, font = list(color = "white")),
margin = list(l = 0, r = 30, t = 0, b = 0)
); plot_training_load
trimp_daily$TRIMP[1]
library(scales)
# Row-bind the dataframes
df_together <- rbind(df_running_all[, Reduce(intersect, list(colnames(df_running_all), colnames(df_cycling_all), colnames(df_swimming_all)))],
df_cycling_all[, Reduce(intersect, list(colnames(df_running_all), colnames(df_cycling_all), colnames(df_swimming_all)))],
df_swimming_all[, Reduce(intersect, list(colnames(df_running_all), colnames(df_cycling_all), colnames(df_swimming_all)))]) %>%
arrange(date) %>%
select(id, date, type, calories, distance, time, hr, hr_max, speed, speed_max)
# Define health values
personal_max_hr <- 188
personal_rest_hr <- 64
# Calculate TRIMP
df_together$duration <- df_together$time / 60
df_together$hr_percentage <- (df_together$hr - personal_rest_hr) / (personal_max_hr - personal_rest_hr)
df_together$TRIMP <- df_together$duration * df_together$hr_percentage * 0.64 * exp(1.92 * df_together$hr_percentage)
# Aggregate daily TRIMP scores
trimp_daily <- df_together %>% mutate(date = as.Date(date)) %>% group_by(date) %>% reframe(type = type, TRIMP = sum(TRIMP, na.rm = TRUE)) %>% arrange(date)
# Generate list of all days in the current year
all_dates <- data.frame(date = seq(min(trimp_daily$date), as.Date(paste0(substr(Sys.Date(), 1, 4), "-12-31")), by = "1 day"))
# Add TRIMP scores to the list
trimp_daily <- all_dates %>%
left_join(trimp_daily, by = "date") %>%
mutate(TRIMP = ifelse(is.na(TRIMP), 0, TRIMP))
# Initialize columns
trimp_daily$ATL <- NA
trimp_daily$CTL <- NA
# Initial values
trimp_daily$ATL[1] <- 0
trimp_daily$CTL[1] <- 0
# Define decay constants
kATL <- exp(-1/7)
kCTL <- exp(-1/42)
# Calculate moving averages
for (i in 2:nrow(trimp_daily)) {
trimp_daily$ATL[i] <- trimp_daily$TRIMP[i] + kATL * (trimp_daily$ATL[i-1] - trimp_daily$TRIMP[i])
trimp_daily$CTL[i] <- trimp_daily$TRIMP[i] + kCTL * (trimp_daily$CTL[i-1] - trimp_daily$TRIMP[i])
}
# Standardize scores
trimp_daily$ATL <- round(trimp_daily$ATL / max(trimp_daily$ATL, na.rm = TRUE) * 100, 0)
trimp_daily$CTL <- round(trimp_daily$CTL / max(trimp_daily$CTL, na.rm = TRUE) * 100, 0)
# Calculate Workload Ratio (ACWR) scores
trimp_daily$ACWR <- round(1 / (1 + exp(-5 * ((trimp_daily$ATL / trimp_daily$CTL) - 1))) * 100, 0)
# Round TRIMP values
trimp_daily$TRIMP <- round(trimp_daily$TRIMP, 0)
# Define colors
colors <- c("Swim" = "#3498db", "Ride" = "#f39c12", "Run" = "#54b98f")
# Separate data for TRIMP bars
trimp_daily$type <- ifelse(trimp_daily$date > as.Date(Sys.Date()), "Run", trimp_daily$type)
trimp_bars <- trimp_daily %>% filter(!is.na(type)) #%>% filter(date >= as.Date("2025-01-01") & date <= as.Date(Sys.Date()+42))
trimp_bars$type <- paste0(trimp_bars$type, " TRIMP")
if(min(trimp_bars$date, na.rm = TRUE) == "2025-01-01") {NULL} else {trimp_bars <- add_row(trimp_bars, date = as.Date("2025-01-01"), type = "Run TRIMP", TRIMP = 0, ATL = trimp_daily[which(trimp_daily$date == "2025-01-01"),]$ATL, CTL = trimp_daily[which(trimp_daily$date == "2025-01-01"),]$ATL, ACWR = trimp_daily[which(trimp_daily$date == "2025-01-01"),]$ACWR)}
trimp_bars <- trimp_bars %>% arrange(date)
# Generate plot
plot_training_load <- trimp_daily %>%                     # your data frame
#filter(date >= as.Date("2025-01-01") & date <= as.Date(Sys.Date()+42)) %>%
plot_ly(x = ~date) |>
# Trimp line  ── black, width 2 ≈ size 1 in ggplot
add_bars(data = trimp_bars,
x = ~date,
y = ~TRIMP,
color = ~type,
name = ~type,
yaxis = "y2",
width = 86400000 * 1,
showlegend = TRUE,
customdata   = ~toupper(gsub(" TRIMP", "", type)),
hovertemplate = "<b>%{customdata}</b><br>%{x|%A}<br>%{x|%m/%d/%Y}<br>TRIMP: %{y}<extra></extra>") |>
# ATL line  ── black, width 2 ≈ size 1 in ggplot
add_lines(y = ~ATL/100,
name = "ATL (7-day)",
line = list(color = rgb(1, 1, 1, 0.50), width = 1, dash = "dot"),
hovertemplate = "<b>%{x|%A}<br>%{x|%m/%d/%Y}</b><br>ATL: %{y:.0%}<extra></extra>") |>
# CTL line  ── grey, width 2 ≈ size 1 in ggplot
add_lines(y = ~CTL/100,
name = "CTL (42-day)",
line = list(color = "#eb4034",  width = 4),
hovertemplate = "<b>%{x|%A}<br>%{x|%m/%d/%Y}</b><br>CTL: %{y:.0%}<extra></extra>") |>
# Hide details
config(displayModeBar = FALSE, staticPlot = FALSE) |>
# centre annotation
layout(
paper_bgcolor="#2d2d2d",
plot_bgcolor="#2d2d2d",
xaxis = list(zeroline = FALSE, fixedrange = TRUE, tickformat = "%b", tickvals = seq(as.Date("2025-01-01"), as.Date("2025-12-15"), by = "month"), ticktext = format(seq(as.Date("2025-01-01"), as.Date("2025-12-15"), by = "month"), "%b"), color = "white", title = NA, gridcolor = "#333", gridwidth = 0.25),
yaxis  = list(zeroline = FALSE, fixedrange = TRUE, color = "white", title = NA, gridcolor = "#333", gridwidth = 0.25, tickformat = ".0%"),
yaxis2 = list(zeroline = FALSE, fixedrange = TRUE, color = "white", title = NA, gridcolor = "#333", gridwidth = 0.25, overlaying = "y", side = "right", range = c(0, 2 * max(trimp_daily$TRIMP, na.rm = TRUE))),
barmode = 'overlay',
legend = list(orientation = "v", x = 0.05, y = 1, font = list(color = "white")),
margin = list(l = 0, r = 30, t = 0, b = 0)
); plot_training_load
View(df_running_all)
