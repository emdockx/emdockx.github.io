---
format: dashboard
title: STRAVAWATTZ
logo: Stravawattz.png
theme: 
  - darkly
  - styles.scss
expandable: false
---

```{r load-packages}
library(dplyr)
library(jsonlite)
library(httr)
library(ggplot2)
library(stringr)
library(tidyr)
library(purrr)
library(lubridate)
library(leaflet)
library(DT)
library(plotly)
library(openmeteo)
library(RColorBrewer)
```

```{r load-data}
load("stravawattz.RData")
```

# Home

## Row {height="60%"}

### Column {width="60%"}

#### Row {height="20%"}

HERE COMES BANNER

#### Row {height="80%"}

<strong>WELCOME TO MY STRAVA DASHBOARD!</strong>

***Wattz up!*** I'm Manu — if you're reading this, you're probably a fellow data enthousiast or just someone who enjoys seeing how others move through the world. Either way, welcome!

This page is a personal dashboard for my runs, rides, swims, and everything in between. I started tracking my activities in 2023 and have since built up a fun little dataset. Rather than spring for a Premium Strava subscription, I decided to build this dashboard myself — to get a clearer view of my progress and tinker with my data.

### Column {width="40%"}

#### Card Tabset {.tabset title="Activities per year" height="50%"}

##### 2025

###### Column {width="100%"}

####### Row {height="40%"}

```{r}
#| content: valuebox
list(
  title = "RUNNING",
  #icon = "hash",
  color = "success",
  value = paste0(length(df_running_2025$id), " sessions")
)
```

```{r}
#| content: valuebox
list(
  title = "CYCLING",
  #icon = "hash",
  color = "warning",
  value = paste0(length(df_cycling_2025$id), " sessions")
)
```

```{r}
#| content: valuebox
list(
  title = "SWIMMING",
  #icon = "hash",
  color = "info",
  value = paste0(length(df_swimming_2025$id), " sessions")
)
```

####### Row {height="60%"}

```{r}
plot_calendar_frontpage_2025
```

##### 2024

###### Row {height="100%"}

####### Column {width="100%"}

######## Row {height="40%"}

```{r}
#| content: valuebox
list(
  title = "RUNNING",
  #icon = "hash",
  color = "success",
  value = paste0(length(df_running_2024$id), " sessions")
)
```

```{r}
#| content: valuebox
list(
  title = "CYCLING",
  #icon = "hash",
  color = "warning",
  value = paste0(length(df_cycling_2024$id), " sessions")
)
```

```{r}
#| content: valuebox
list(
  title = "SWIMMING",
  #icon = "hash",
  color = "info",
  value = paste0(length(df_swimming_2024$id), " sessions")
)
```

######## Row {height="60%"}

```{r}
plot_calendar_frontpage_2024
```

##### 2023

###### Row {height="100%"}

####### Column {width="100%"}

######## Row {height="40%"}

```{r}
#| content: valuebox
list(
  title = "RUNNING",
  #icon = "hash",
  color = "success",
  value = paste0(length(df_running_2023$id), " sessions")
)
```

```{r}
#| content: valuebox
list(
  title = "CYCLING",
  #icon = "hash",
  color = "warning",
  value = paste0(length(df_cycling_2023$id), " sessions")
)
```

```{r}
#| content: valuebox
list(
  title = "SWIMMING",
  #icon = "hash",
  color = "info",
  value = paste0(length(df_swimming_2023$id), " sessions")
)
```

######## Row {height="60%"}

```{r}
plot_calendar_frontpage_2023
```

## Row {height="40%"}

### Row {height="100%"}

#### Column {width="25%"}

##### Row {height="100%"}

<u>**Navigating the dashboard**<br></u>

Explore my running, cycling and swimming stats or see the entire datasets. If you see interesting patterns or ways to improve my fitness, have ideas for new visualizations, or just want to chat about (this kind of) data, I’d love to hear from you.

#### Column {width="34%"}

##### Row {height="100%"}

<u>**Getting data from Strava**<br></u>

I retrieved my Strava data using an [OAuth 2.0 script](https://httr2.r-lib.org/articles/oauth.html){target="_blank"} in R, authenticated via the [Strava API](https://developers.strava.com){target="_blank"}. If you're interested in the script, reach out to me.

#### Column {width="40%"}

```{=html}
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9616514614388484"
     crossorigin="anonymous"></script>
<!-- stravawattz_frontpage -->
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-9616514614388484"
     data-ad-slot="8670886418"
     data-ad-format="auto"
     data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
```

# Running

## Row {height="100%"}

### Column {width="15%"}

#### Row {height="20%"}

```{r running-box-sessions}
#| content: valuebox
list(
  title = paste("Running in", format(Sys.Date(), '%Y')),
  #icon = "hash",
  color = "success",
  value = paste0(length(df_running_365$id), " sessions")
)
```

#### Row {height="20%"}

```{r running-box-distance}
#| content: valuebox
#| title: "Total Distance"
list(
  #icon = "rocket-takeoff-fill",
  color = "success",
  value = paste0(round(sum(df_running_365$distance, na.rm = TRUE) / 1000, 1), " km")
)
```

#### Row {height="20%"}

```{r running-box-time}
#| content: valuebox
#| title: "Total Duration"
#| padding: 0px
list(
  #icon = "speedometer",
  color = "success",
  value = ifelse(sum(df_running_365$time, na.rm = TRUE) / 60 >= 300, paste0(round(floor(sum(df_running_365$time, na.rm = TRUE) / 60 / 60), 0),"h ", ifelse(round(((sum(df_running_365$time, na.rm = TRUE) / 60 / 60) - floor(sum(df_running_365$time, na.rm = TRUE) / 60 / 60)) * 60, 0)<10,paste0("0",round(((sum(df_running_365$time, na.rm = TRUE) / 60 / 60) - floor(sum(df_running_365$time, na.rm = TRUE) / 60 / 60)) * 60, 0)),round(((sum(df_running_365$time, na.rm = TRUE) / 60 / 60) - floor(sum(df_running_365$time, na.rm = TRUE) / 60 / 60)) * 60, 0)), "min"), paste0(round(sum(df_running_365$time, na.rm = TRUE) / 60, 0), "min"))
)
```

#### Row {height="20%"}

```{r running-box-cadence}
#| content: valuebox
#| title: "Average Cadence"
list(
  #icon = "rocket-takeoff-fill",
  color = "success",
  value = paste0(161, " spm")
)
```

#### Row {height="20%"}

```{r running-box-pace}
#| content: valuebox
#| title: "Average Pace"
list(
  #icon = "speedometer",
  color = "success",
  value = ifelse(is.nan(as.numeric(floor(pace <- mean(df_running_365$pace, na.rm = TRUE)), ":", round((pace %% 1) * 60))), "No data",paste0(floor(pace <- mean(df_running_365$pace, na.rm = TRUE)), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"))
)
```

#### Row {height="20%"}

```{r running-box-hr}
#| content: valuebox
#| title: "Average HR"
list(
  #icon = "speedometer",
  color = "success",
  value = ifelse(is.nan(as.numeric(round(sum(df_running_365$speed * df_running_365$hr) / sum(df_running_365$speed), 0))), "No data", paste0(round(sum(df_running_365$speed * df_running_365$hr) / sum(df_running_365$speed), 0), " bpm"))
)
```

### Column {width="42.5%"}

#### Row {height="25%"}

##### Column {.tabset title="Calendar"}

```{r}
#| padding: 0px
#| title: "Daily"
plot_calendar_running_d
```

```{r}
#| padding: 0px
#| title: "Monthly"
plot_calendar_running_m
```

#### Row {height="75%"}

##### Column {.tabset title="Rankings"}

```{r}
#| padding: 0px
#| title: "Distance"
plot_distance_running
```

```{r}
#| padding: 0px
#| title: "Time"
plot_time_running
```

```{r}
#| padding: 0px
#| title: "Pace"
plot_pace_running
```

```{r}
#| padding: 0px
#| title: "HR"
plot_hr_running
```

### Column {width="42.5%"}

#### Row {height="25%"}

##### Column {.tabset title="Cumulative"}

```{r}
#| padding: 0px
#| title: "Distance"
plot_cum_distance_running
```

```{r}
#| padding: 0px
#| title: "Time"
plot_cum_time_running
```

#### Row {height="75%"}

##### Column {.tabset title="Maps"}

```{r}
#| title: "Latest"
#| padding: 0px 
plot_map1_running
```

```{r}
#| title: "Fastest"
#| padding: 0px 
plot_map2_running
```

```{r}
#| title: "Longest"
#| padding: 0px 
plot_map3_running
```

```{r}
#| title: "All"
#| padding: 0px 
plot_map4_running
```

# Cycling

## Row {height="100%"}

### Column {width="15%"}

#### Row {height="14.29%"}

```{r cycling-box-sessions}
#| content: valuebox
list(
  title = paste("Cycling in", format(Sys.Date(), '%Y')),
  #icon = "hash",
  color = "warning",
  value = paste0(length(df_cycling_365$id), " sessions")
)
```

#### Row {height="14.29%"}

```{r cycling-box-distance}
#| content: valuebox
#| title: "Total Distance"
list(
  #icon = "rocket-takeoff-fill",
  color = "warning",
  value = paste0(round(sum(df_cycling_365$distance, na.rm = TRUE) / 1000, 1), " km")
)
```

#### Row {height="14.29%"}

```{r cycling-box-time}
#| content: valuebox
#| title: "Total Duration"
#| padding: 0px
list(
  #icon = "speedometer",
  color = "warning",
  value = ifelse(sum(df_cycling_365$time, na.rm = TRUE) / 60 >= 300, paste0(round(floor(sum(df_cycling_365$time, na.rm = TRUE) / 60 / 60), 0),"h ", ifelse(round(((sum(df_cycling_365$time, na.rm = TRUE) / 60 / 60) - floor(sum(df_cycling_365$time, na.rm = TRUE) / 60 / 60)) * 60, 0)<10,paste0("0",round(((sum(df_cycling_365$time, na.rm = TRUE) / 60 / 60) - floor(sum(df_cycling_365$time, na.rm = TRUE) / 60 / 60)) * 60, 0)),round(((sum(df_cycling_365$time, na.rm = TRUE) / 60 / 60) - floor(sum(df_cycling_365$time, na.rm = TRUE) / 60 / 60)) * 60, 0)), "min"), paste0(round(sum(df_cycling_365$time, na.rm = TRUE) / 60, 0), "min"))
)
```

#### Row {height="14.29%"}

```{r cycling-box-elevation}
#| content: valuebox
#| title: "Total Elevation"
list(
  #icon = "speedometer",
  color = "warning",
  value = paste0(round(sum(df_cycling_365$elevation, na.rm = TRUE), 1), " m")
)
```

#### Row {height="14.29%"}

```{r cycling-box-cadence}
#| content: valuebox
#| title: "Average Cadence"
list(
  #icon = "speedometer",
  color = "warning",
  value = paste0(round(mean(df_cycling_365$cadence, na.rm = TRUE), 1), " rpm")
)
```

#### Row {height="14.29%"}

```{r cycling-box-pace}
#| content: valuebox
#| title: "Average Speed"
list(
  #icon = "speedometer",
  color = "warning",
  value = ifelse(is.nan(as.numeric(round(mean(df_cycling_365$speed, na.rm = TRUE), 1))), "No data", paste0(round(mean(df_cycling_365$speed, na.rm = TRUE), 1), " km/h"))
)
```

#### Row {height="14.29%"}

```{r cycling-box-hr}
#| content: valuebox
#| title: "Average HR"
list(
  #icon = "speedometer",
  color = "warning",
  value = ifelse(is.na(as.numeric(round(sum(df_cycling_365$speed * df_cycling_365$hr) / sum(df_cycling_365$speed), 0))), "No data", paste0(round(sum(df_cycling_365$speed * df_cycling_365$hr) / sum(df_cycling_365$speed), 0), " bpm"))
)
```

### Column {width="42.5%"}

#### Row {height="25%"}

##### Column {.tabset title="Calendar"}

```{r}
#| padding: 0px
#| title: "Daily"
plot_calendar_cycling_d
```

```{r}
#| padding: 0px
#| title: "Monthly"
plot_calendar_cycling_m
```

#### Row {height="75%"}

##### Column {.tabset title="Rankings"}

```{r}
#| padding: 0px
#| title: "Distance"
plot_distance_cycling
```

```{r}
#| padding: 0px
#| title: "Time"
plot_time_cycling
```

```{r}
#| padding: 0px
#| title: "Elevation"
plot_elevation_cycling
```

```{r}
#| padding: 0px
#| title: "Speed"
plot_pace_cycling
```

```{r}
#| padding: 0px
#| title: "HR"
plot_hr_cycling
```

### Column {width="42.5%"}

#### Row {height="25%"}

##### Column {.tabset title="Cumulative"}

```{r}
#| padding: 0px
#| title: "Distance"
plot_cum_distance_cycling
```

```{r}
#| padding: 0px
#| title: "Time"
plot_cum_time_cycling
```

```{r}
#| padding: 0px
#| title: "Elevation"
plot_cum_elevation_cycling
```

#### Row {height="75%"}

##### Column {.tabset title="Maps"}

```{r}
#| title: "Latest"
#| padding: 0px 
plot_map1_cycling
```

```{r}
#| title: "Fastest"
#| padding: 0px 
plot_map2_cycling
```

```{r}
#| title: "Longest"
#| padding: 0px 
plot_map3_cycling
```

```{r}
#| title: "All"
#| padding: 0px 
plot_map4_cycling
```

# Swimming

## Row {height="100%"}

### Column {width="15%"}

#### Row {height="20%"}

```{r swimming-box-sessions}
#| content: valuebox
list(
  title = paste("Swimming in", format(Sys.Date(), '%Y')),
  #icon = "hash",
  color = "info",
  value = paste0(length(df_swimming_365$id), " sessions")
)
```

#### Row {height="20%"}

```{r swimming-box-distance}
#| content: valuebox
#| title: "Total Distance"
list(
  #icon = "rocket-takeoff-fill",
  color = "info",
  value = paste0(round(sum(df_swimming_365$distance, na.rm = TRUE) / 1000, 1), " km")
)
```

#### Row {height="20%"}

```{r swimming-box-time}
#| content: valuebox
#| title: "Total Duration"
#| padding: 0px
list(
  #icon = "speedometer",
  color = "info",
  value = ifelse(sum(df_swimming_365$time, na.rm = TRUE) / 60 >= 300, paste0(round(floor(sum(df_swimming_365$time, na.rm = TRUE) / 60 / 60), 0),"h ", ifelse(round(((sum(df_swimming_365$time, na.rm = TRUE) / 60 / 60) - floor(sum(df_swimming_365$time, na.rm = TRUE) / 60 / 60)) * 60, 0)<10,paste0("0",round(((sum(df_swimming_365$time, na.rm = TRUE) / 60 / 60) - floor(sum(df_swimming_365$time, na.rm = TRUE) / 60 / 60)) * 60, 0)),round(((sum(df_swimming_365$time, na.rm = TRUE) / 60 / 60) - floor(sum(df_swimming_365$time, na.rm = TRUE) / 60 / 60)) * 60, 0)), "min"), paste0(round(sum(df_swimming_365$time, na.rm = TRUE) / 60, 0), "min"))
)
```

#### Row {height="20%"}

```{r swimming-box-lengths}
#| content: valuebox
#| title: "Total Lengths (50m)"
#| padding: 0px
list(
  #icon = "speedometer",
  color = "info",
  value = paste0(ifelse(sum(df_swimming_365$distance)/50%%2==0, sum(df_swimming_365$distance)/50, (sum(df_swimming_365$distance)/50)+1), " lengths")
)
```

#### Row {height="20%"}

```{r swimming-box-pace}
#| content: valuebox
#| title: "Average Pace"
list(
  #icon = "speedometer",
  color = "info",
  value = ifelse(is.nan(as.numeric(floor(pace <- mean(df_swimming_365$pace, na.rm = TRUE)/10), ":", round((pace %% 1) * 60))), "No data", paste0(floor(pace <- mean(df_swimming_365$pace, na.rm = TRUE)/10), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/100m"))
)
```

#### Row {height="20%"}

```{r swimming-box-hr}
#| content: valuebox
#| title: "Average HR"
list(
  #icon = "speedometer",
  color = "info",
  value = ifelse(is.nan(as.numeric(round(sum(df_swimming_365$speed * df_swimming_365$hr) / sum(df_swimming_365$speed), 0))), "No data", paste0(round(sum(df_swimming_365$speed * df_swimming_365$hr) / sum(df_swimming_365$speed), 0), " bpm"))
)
```

### Column {width="42.5%"}

#### Row {height="25%"}

##### Column {.tabset title="Calendar"}

```{r}
#| padding: 0px
#| title: "Daily"
plot_calendar_swimming_d
```

```{r}
#| padding: 0px
#| title: "Monthly"
plot_calendar_swimming_m
```

#### Row {height="75%"}

##### Column {.tabset title="Rankings"}

```{r}
#| padding: 0px
#| title: "Distance"
plot_distance_swimming
```

```{r}
#| padding: 0px
#| title: "Time"
plot_time_swimming
```

```{r}
#| padding: 0px
#| title: "Pace"
plot_pace_swimming
```

```{r}
#| padding: 0px
#| title: "HR"
plot_hr_swimming
```

### Column {width="42.5%"}

#### Row {height="25%"}

##### Column {.tabset title="Cumulative"}

```{r}
#| padding: 0px
#| title: "Distance"
plot_cum_distance_swimming
```

```{r}
#| padding: 0px
#| title: "Time"
plot_cum_time_swimming
```

#### Row {height="75%"}

##### Column {.tabset title="Maps"}

```{r}
#| title: "Latest"
#| padding: 0px 
plot_map1_swimming
```

```{r}
#| title: "Fastest"
#| padding: 0px 
plot_map2_swimming
```

```{r}
#| title: "Longest"
#| padding: 0px 
plot_map3_swimming
```

```{r}
#| title: "All"
#| padding: 0px 
plot_map3_swimming
```

<!--# ♥

UNDER DEVELOPMENT

# All data

## Row {height="25%"}

HERE COMES BANNER

## Row {height="75%"}



```{r}
#| echo: false
library(plotly)
library(crosstalk)
library(reactable)
library(dplyr)

# Prepare SharedData objects
overview_running <- SharedData$new(overview_running %>% mutate(km = as.numeric(km)))
overview_cycling <- SharedData$new(overview_cycling)
overview_swimming <- SharedData$new(overview_swimming)
```

### Column {width="33%"}

#### Row (height="25%")

```{r}
#| echo: false
reactable(
  overview_running,
  class = "tag",
  filterable = FALSE,     # disables column filters
  searchable = FALSE,     # disables global search
  highlight = TRUE,       # highlight row on hover
  pagination = FALSE,     # show all rows (equivalent to pageLength = nrow(...))
  selection = "single",
  onClick = "select",
  defaultColDef = colDef(align = "left"))
```

#### Row (height="75%")

```{r}
#| echo: false
subplot(

# Running distance
plot_overview_running1 <- 
  plot_ly(overview_running, x = ~date, 
          y = ~km, 
          type = 'scatter', 
          mode = 'markers', 
          name = "Distance (km)", 
          marker = list(color = "#54b98f", symbol="circle-dot"),
          text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Distance:", km, "km"),# "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hr_max, 0), "bpm"),
          hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#54b98f"),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", fixedrange = TRUE, gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#54b98f"), ticksuffix = " km", fixedrange = TRUE, title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
         margin = list(l = 0, r = 0, t = 0, b = 0)),

# Running pace
plot_overview_running2 <- 
  plot_ly(overview_running, x = ~date, 
          y = ~pace, 
          type = 'scatter', 
          mode = 'markers', 
          name = "Distance (km)", 
          marker = list(color = "#54b98f", symbol="star-triangle-up-dot"),
          text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>Pace:", pace, "min/km"),# "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hr_max, 0), "bpm"),
          hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#54b98f"),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", fixedrange = TRUE, gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#54b98f"), ticksuffix = "/km", fixedrange = TRUE, title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
         margin = list(l = 0, r = 0, t = 0, b = 0)),

# Running hr
plot_overview_running3 <- 
  plot_ly(overview_running, x = ~date, 
          y = ~hr, 
          type = 'scatter', 
          mode = 'markers', 
          name = "Distance (km)", 
          marker = list(color = "#54b98f", symbol="star-dot"),
          text = ~paste(wday(date, label = TRUE, abbr = FALSE, week_start = 1), format(as.Date(date), "%d/%m/%y"), "</b><br>HR:", hr, "bpm"),# "<br>Time:", round(time, 0), "min", "<br>Pace:", paste0(floor(pace <- pace), ":", ifelse(round((pace %% 1) * 60) < 10, paste0("0", round((pace %% 1) * 60)), round((pace %% 1) * 60)), "/km"), "<br>Speed:", paste0(round(speed, 1), "km/h"), "<br>Avg. HR:", round(hr, 0), "bpm", "<br>Max. HR:", round(hr_max, 0), "bpm"),
          hoverinfo = 'text', textposition = "none", opacity = 0.97) |>
  config(displayModeBar = FALSE, staticPlot = FALSE) |>
  layout(paper_bgcolor="#2d2d2d", plot_bgcolor="#2d2d2d", hoverlabel = list(font = list(color = "white"), bgcolor = "#2d2d2d", bordercolor = "#54b98f"),
         xaxis = list(title = NA, visible = TRUE, showticklabels = FALSE, ticks = "", fixedrange = TRUE, gridcolor = "transparent", gridwidth = 0.25),
         yaxis = list(tickfont = list(size=10, color="#54b98f"), ticksuffix = "bpm", fixedrange = TRUE, title = NA, visible = TRUE, showticklabels = TRUE, ticks = "", side ="top", gridcolor = "#333", gridwidth = 0.25),
         margin = list(l = 0, r = 0, t = 0, b = 0)),



  nrows = 3,
  shareX = TRUE,
  titleY = TRUE,
  margin = 0.07) |>
  layout(showlegend = FALSE)
```

### Column {width="33%"}

#### Row (height="25%")

```{r}
#| echo: false
reactable(
  overview_running,
  class = "tag",
  filterable = FALSE,     # disables column filters
  searchable = FALSE,     # disables global search
  highlight = TRUE,       # highlight row on hover
  pagination = FALSE,     # show all rows (equivalent to pageLength = nrow(...))
  selection = "single",
  onClick = "select",
  defaultColDef = colDef(align = "left"))
```

#### Row (height="75%")

```{r}
#| echo: false
subplot(
  plot_ly(overview_running, x = ~date, y = ~km, type = 'scatter', mode = 'markers', name = "Distance (km)", marker = list(color = 'blue')),
  plot_ly(overview_running, x = ~date, y = ~pace, type = 'scatter', mode = 'markers', name = "Pace", marker = list(color = 'green')),
  plot_ly(overview_running, x = ~date, y = ~hr, type = 'scatter', mode = 'markers', name = "Heart Rate", marker = list(color = 'red')),
  nrows = 3,
  shareX = TRUE,
  titleY = TRUE
)

```

### Column {width="33%"}

#### Row (height="25%")

```{r}
#| echo: false
reactable(
  overview_running,
  class = "tag",
  filterable = FALSE,     # disables column filters
  searchable = FALSE,     # disables global search
  highlight = TRUE,       # highlight row on hover
  pagination = FALSE,     # show all rows (equivalent to pageLength = nrow(...))
  selection = "single",
  onClick = "select",
  defaultColDef = colDef(align = "left"))
```

#### Row (height="75%")

```{r}
#| echo: false
plot_ly(overview_running, x = ~date, y = ~km, type = 'scatter', mode = 'markers', text = ~date)

#| echo: false
plot_ly(overview_running, x = ~date, y = ~pace, type = 'scatter', mode = 'markers', text = ~date)

#| echo: false
plot_ly(overview_running, x = ~date, y = ~hr, type = 'scatter', mode = 'markers', text = ~date)
```
-->
# Datasets

## Row {height="30%"}

```{=html}
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9616514614388484"
     crossorigin="anonymous"></script>
<!-- stravawattz_datasets -->
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-9616514614388484"
     data-ad-slot="5226569652"
     data-ad-format="auto"
     data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
```
## Row {height="10%"}

### Column

::: {style="text-align: center; font-size: 20px; font-weight: bold; margin-bottom: 10px;"}
Running (all-time)
:::

### Column

::: {style="text-align: center; font-size: 20px; font-weight: bold; margin-bottom: 10px;"}
Cycling (all-time)
:::

### Column

::: {style="text-align: center; font-size: 20px; font-weight: bold; margin-bottom: 10px;"}
Swimming (all-time)
:::

## Row {height="60%"}

### Column {width="33%"}

```{r}
#| padding: 0px
datatable(df_running_all |> arrange(desc(date)) |> mutate(pace = sprintf("%02d:%02d", floor(pace), round((pace %% 1) * 60)), time = round(time/60,0), date = format(as.Date(date), "%y-%m-%d"), distance = format(round(distance/1000,1),1)) |> select(date, km = distance, time, pace, hr), rownames = FALSE, options = list(initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'color': '#00bc8c', 'text-align': 'center', 'font-weight': 'bold'});}"), searching = FALSE, lengthChange = FALSE, pageLength = nrow(df_running_all), info = FALSE, columnDefs = list(list(className = 'dt-center', targets = 0:4)))) |>
  formatStyle(c("date", "pace", "km", "time", "hr"), color = "black", background = "#00bc8c")
```

### Column {width="33%"}

```{r}
#| padding: 0px
datatable(df_cycling_all |> arrange(desc(date)) |> mutate(speed = format(round(speed,1),1), time = round(time/60,0), date = format(as.Date(date), "%y-%m-%d"), distance = format(round(distance/1000,1),1)) |> select(date, km = distance, time, speed, hr), rownames = FALSE, options = list(initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'color': '#f39c12', 'text-align': 'center', 'font-weight': 'bold'});}"), searching = FALSE, lengthChange = FALSE, pageLength = nrow(df_cycling_all), info = FALSE, columnDefs = list(list(className = 'dt-center', targets = 0:4)))) |>
  formatStyle(c("date", "speed", "km", "time", "hr"), color = "black", background = "#f39c12")
```

### Column {width="33%"}

```{r}
#| padding: 0px
#| 
datatable(df_swimming_all |> arrange(desc(date)) |> mutate(pace = pace/10, pace = sprintf("%02d:%02d", floor(pace), round((pace %% 1) * 60)), time = round(time/60,0), date = format(as.Date(date), "%y-%m-%d"), distance = format(round(distance,1),1)) |> select(date, meter = distance, time, pace, hr), rownames = FALSE, options = list(initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'color': '#3498db', 'text-align': 'center', 'font-weight': 'bold'});}"), searching = FALSE, lengthChange = FALSE, pageLength = nrow(df_swimming_all), info = FALSE, columnDefs = list(list(className = 'dt-center', targets = 0:4)))) |>
  formatStyle(c("date", "pace", "meter", "time", "hr"), color = "black", background = "#3498db")
```
